<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description A unifysell order
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aftertax_total' => '\Unifysell\SDK\Model\Money',
        'amazon_order_id' => 'string',
        'buyer_id' => 'int',
        'comment_client' => 'string',
        'comment_merchant' => 'string',
        'date_approved' => 'string',
        'date_cancelled' => 'string',
        'date_changed' => 'string',
        'date_created' => 'string',
        'date_paid' => 'string',
        'date_shipped' => 'string',
        'earliest_ship_date' => 'string',
        'ebay_order_id' => 'string',
        'ebay_payment_status' => 'string',
        'fulfillment_channel' => 'string',
        'hood_order_id' => 'string',
        'id' => 'int',
        'increment_id' => 'string',
        'invoice_address_id' => 'int',
        'invoice_no' => 'string',
        'is_ebay_plus' => 'bool',
        'is_pickup' => 'bool',
        'is_premium_order' => 'bool',
        'is_prime' => 'bool',
        'label_ids' => 'string[]',
        'latest_ship_date' => 'string',
        'note' => 'string',
        'number_of_items_shipped' => 'int',
        'number_of_items_unshipped' => 'int',
        'order_id' => 'string',
        'order_no' => 'string',
        'order_type' => 'string',
        'package_service' => 'string',
        'payment_method' => 'string',
        'position_ids' => 'string[]',
        'pretax_total' => '\Unifysell\SDK\Model\Money',
        'purchased_order_number' => 'string',
        'refund_requested' => 'bool',
        'remote_allowed_shipping_methods' => 'string[]',
        'sales_channel' => 'string',
        'seller_email' => 'string',
        'ship_method' => 'string',
        'ship_method_code' => 'string',
        'ship_service_level' => 'string',
        'shipment_increment_id' => 'string',
        'shipment_method' => 'string',
        'shipment_offer_ids' => 'string[]',
        'shipment_offers_available' => 'bool',
        'shipment_service_level_category' => 'string',
        'shipped_by_amazon_tfm' => 'bool',
        'shipping_address_id' => 'int',
        'shipping_cost' => '\Unifysell\SDK\Model\Money',
        'status' => 'string',
        'store_id' => 'string',
        'tracking_number_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aftertax_total' => null,
        'amazon_order_id' => null,
        'buyer_id' => null,
        'comment_client' => null,
        'comment_merchant' => null,
        'date_approved' => null,
        'date_cancelled' => 'datetime',
        'date_changed' => 'datetime',
        'date_created' => 'datetime',
        'date_paid' => 'datetime',
        'date_shipped' => 'datetime',
        'earliest_ship_date' => 'datetime',
        'ebay_order_id' => null,
        'ebay_payment_status' => null,
        'fulfillment_channel' => null,
        'hood_order_id' => null,
        'id' => null,
        'increment_id' => null,
        'invoice_address_id' => null,
        'invoice_no' => null,
        'is_ebay_plus' => null,
        'is_pickup' => null,
        'is_premium_order' => null,
        'is_prime' => null,
        'label_ids' => null,
        'latest_ship_date' => 'datetime',
        'note' => null,
        'number_of_items_shipped' => null,
        'number_of_items_unshipped' => null,
        'order_id' => null,
        'order_no' => null,
        'order_type' => null,
        'package_service' => null,
        'payment_method' => null,
        'position_ids' => null,
        'pretax_total' => null,
        'purchased_order_number' => null,
        'refund_requested' => null,
        'remote_allowed_shipping_methods' => null,
        'sales_channel' => null,
        'seller_email' => 'email',
        'ship_method' => null,
        'ship_method_code' => null,
        'ship_service_level' => null,
        'shipment_increment_id' => null,
        'shipment_method' => null,
        'shipment_offer_ids' => null,
        'shipment_offers_available' => null,
        'shipment_service_level_category' => null,
        'shipped_by_amazon_tfm' => null,
        'shipping_address_id' => null,
        'shipping_cost' => null,
        'status' => null,
        'store_id' => null,
        'tracking_number_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aftertax_total' => 'aftertaxTotal',
        'amazon_order_id' => 'amazonOrderId',
        'buyer_id' => 'buyerId',
        'comment_client' => 'commentClient',
        'comment_merchant' => 'commentMerchant',
        'date_approved' => 'dateApproved',
        'date_cancelled' => 'dateCancelled',
        'date_changed' => 'dateChanged',
        'date_created' => 'dateCreated',
        'date_paid' => 'datePaid',
        'date_shipped' => 'dateShipped',
        'earliest_ship_date' => 'earliestShipDate',
        'ebay_order_id' => 'ebayOrderId',
        'ebay_payment_status' => 'ebayPaymentStatus',
        'fulfillment_channel' => 'fulfillmentChannel',
        'hood_order_id' => 'hoodOrderId',
        'id' => 'id',
        'increment_id' => 'incrementId',
        'invoice_address_id' => 'invoiceAddressId',
        'invoice_no' => 'invoiceNo',
        'is_ebay_plus' => 'isEbayPlus',
        'is_pickup' => 'isPickup',
        'is_premium_order' => 'isPremiumOrder',
        'is_prime' => 'isPrime',
        'label_ids' => 'labelIds',
        'latest_ship_date' => 'latestShipDate',
        'note' => 'note',
        'number_of_items_shipped' => 'numberOfItemsShipped',
        'number_of_items_unshipped' => 'numberOfItemsUnshipped',
        'order_id' => 'orderId',
        'order_no' => 'orderNo',
        'order_type' => 'orderType',
        'package_service' => 'packageService',
        'payment_method' => 'paymentMethod',
        'position_ids' => 'positionIds',
        'pretax_total' => 'pretaxTotal',
        'purchased_order_number' => 'purchasedOrderNumber',
        'refund_requested' => 'refundRequested',
        'remote_allowed_shipping_methods' => 'remoteAllowedShippingMethods',
        'sales_channel' => 'salesChannel',
        'seller_email' => 'sellerEmail',
        'ship_method' => 'shipMethod',
        'ship_method_code' => 'shipMethodCode',
        'ship_service_level' => 'shipServiceLevel',
        'shipment_increment_id' => 'shipmentIncrementId',
        'shipment_method' => 'shipmentMethod',
        'shipment_offer_ids' => 'shipmentOfferIds',
        'shipment_offers_available' => 'shipmentOffersAvailable',
        'shipment_service_level_category' => 'shipmentServiceLevelCategory',
        'shipped_by_amazon_tfm' => 'shippedByAmazonTFM',
        'shipping_address_id' => 'shippingAddressId',
        'shipping_cost' => 'shippingCost',
        'status' => 'status',
        'store_id' => 'storeId',
        'tracking_number_id' => 'trackingNumberID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aftertax_total' => 'setAftertaxTotal',
        'amazon_order_id' => 'setAmazonOrderId',
        'buyer_id' => 'setBuyerId',
        'comment_client' => 'setCommentClient',
        'comment_merchant' => 'setCommentMerchant',
        'date_approved' => 'setDateApproved',
        'date_cancelled' => 'setDateCancelled',
        'date_changed' => 'setDateChanged',
        'date_created' => 'setDateCreated',
        'date_paid' => 'setDatePaid',
        'date_shipped' => 'setDateShipped',
        'earliest_ship_date' => 'setEarliestShipDate',
        'ebay_order_id' => 'setEbayOrderId',
        'ebay_payment_status' => 'setEbayPaymentStatus',
        'fulfillment_channel' => 'setFulfillmentChannel',
        'hood_order_id' => 'setHoodOrderId',
        'id' => 'setId',
        'increment_id' => 'setIncrementId',
        'invoice_address_id' => 'setInvoiceAddressId',
        'invoice_no' => 'setInvoiceNo',
        'is_ebay_plus' => 'setIsEbayPlus',
        'is_pickup' => 'setIsPickup',
        'is_premium_order' => 'setIsPremiumOrder',
        'is_prime' => 'setIsPrime',
        'label_ids' => 'setLabelIds',
        'latest_ship_date' => 'setLatestShipDate',
        'note' => 'setNote',
        'number_of_items_shipped' => 'setNumberOfItemsShipped',
        'number_of_items_unshipped' => 'setNumberOfItemsUnshipped',
        'order_id' => 'setOrderId',
        'order_no' => 'setOrderNo',
        'order_type' => 'setOrderType',
        'package_service' => 'setPackageService',
        'payment_method' => 'setPaymentMethod',
        'position_ids' => 'setPositionIds',
        'pretax_total' => 'setPretaxTotal',
        'purchased_order_number' => 'setPurchasedOrderNumber',
        'refund_requested' => 'setRefundRequested',
        'remote_allowed_shipping_methods' => 'setRemoteAllowedShippingMethods',
        'sales_channel' => 'setSalesChannel',
        'seller_email' => 'setSellerEmail',
        'ship_method' => 'setShipMethod',
        'ship_method_code' => 'setShipMethodCode',
        'ship_service_level' => 'setShipServiceLevel',
        'shipment_increment_id' => 'setShipmentIncrementId',
        'shipment_method' => 'setShipmentMethod',
        'shipment_offer_ids' => 'setShipmentOfferIds',
        'shipment_offers_available' => 'setShipmentOffersAvailable',
        'shipment_service_level_category' => 'setShipmentServiceLevelCategory',
        'shipped_by_amazon_tfm' => 'setShippedByAmazonTfm',
        'shipping_address_id' => 'setShippingAddressId',
        'shipping_cost' => 'setShippingCost',
        'status' => 'setStatus',
        'store_id' => 'setStoreId',
        'tracking_number_id' => 'setTrackingNumberId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aftertax_total' => 'getAftertaxTotal',
        'amazon_order_id' => 'getAmazonOrderId',
        'buyer_id' => 'getBuyerId',
        'comment_client' => 'getCommentClient',
        'comment_merchant' => 'getCommentMerchant',
        'date_approved' => 'getDateApproved',
        'date_cancelled' => 'getDateCancelled',
        'date_changed' => 'getDateChanged',
        'date_created' => 'getDateCreated',
        'date_paid' => 'getDatePaid',
        'date_shipped' => 'getDateShipped',
        'earliest_ship_date' => 'getEarliestShipDate',
        'ebay_order_id' => 'getEbayOrderId',
        'ebay_payment_status' => 'getEbayPaymentStatus',
        'fulfillment_channel' => 'getFulfillmentChannel',
        'hood_order_id' => 'getHoodOrderId',
        'id' => 'getId',
        'increment_id' => 'getIncrementId',
        'invoice_address_id' => 'getInvoiceAddressId',
        'invoice_no' => 'getInvoiceNo',
        'is_ebay_plus' => 'getIsEbayPlus',
        'is_pickup' => 'getIsPickup',
        'is_premium_order' => 'getIsPremiumOrder',
        'is_prime' => 'getIsPrime',
        'label_ids' => 'getLabelIds',
        'latest_ship_date' => 'getLatestShipDate',
        'note' => 'getNote',
        'number_of_items_shipped' => 'getNumberOfItemsShipped',
        'number_of_items_unshipped' => 'getNumberOfItemsUnshipped',
        'order_id' => 'getOrderId',
        'order_no' => 'getOrderNo',
        'order_type' => 'getOrderType',
        'package_service' => 'getPackageService',
        'payment_method' => 'getPaymentMethod',
        'position_ids' => 'getPositionIds',
        'pretax_total' => 'getPretaxTotal',
        'purchased_order_number' => 'getPurchasedOrderNumber',
        'refund_requested' => 'getRefundRequested',
        'remote_allowed_shipping_methods' => 'getRemoteAllowedShippingMethods',
        'sales_channel' => 'getSalesChannel',
        'seller_email' => 'getSellerEmail',
        'ship_method' => 'getShipMethod',
        'ship_method_code' => 'getShipMethodCode',
        'ship_service_level' => 'getShipServiceLevel',
        'shipment_increment_id' => 'getShipmentIncrementId',
        'shipment_method' => 'getShipmentMethod',
        'shipment_offer_ids' => 'getShipmentOfferIds',
        'shipment_offers_available' => 'getShipmentOffersAvailable',
        'shipment_service_level_category' => 'getShipmentServiceLevelCategory',
        'shipped_by_amazon_tfm' => 'getShippedByAmazonTfm',
        'shipping_address_id' => 'getShippingAddressId',
        'shipping_cost' => 'getShippingCost',
        'status' => 'getStatus',
        'store_id' => 'getStoreId',
        'tracking_number_id' => 'getTrackingNumberId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGE_SERVICE_ANY = 'any';
    const PACKAGE_SERVICE_DHL = 'DHL';
    const PACKAGE_SERVICE_DHL_INTERNATIONAL = 'DHL International';
    const PACKAGE_SERVICE_DPD = 'DPD';
    const PACKAGE_SERVICE_FEDEX = 'Fedex';
    const PACKAGE_SERVICE_HERMES = 'Hermes';
    const PACKAGE_SERVICE_NONE = 'none';
    const PACKAGE_SERVICE_OTHER = 'other';
    const PACKAGE_SERVICE_STANDARD = 'standard';
    const PACKAGE_SERVICE_UPS = 'UPS';
    const PAYMENT_METHOD_AMAZON = 'Amazon';
    const PAYMENT_METHOD_AMAZON_PAY = 'Amazon Pay';
    const PAYMENT_METHOD_CASH_ON_DELIVERY = 'Cash on delivery';
    const PAYMENT_METHOD_CASH_ON_PICKUP = 'Cash on pickup';
    const PAYMENT_METHOD_CLICKAND_BUY = 'ClickandBuy';
    const PAYMENT_METHOD_CREDIT_CARD = 'Credit Card';
    const PAYMENT_METHOD_DEBIT = 'Debit';
    const PAYMENT_METHOD_GIROPAY = 'Giropay';
    const PAYMENT_METHOD_INVOICE = 'Invoice';
    const PAYMENT_METHOD_KLARNA_CHECKOUT = 'Klarna Checkout';
    const PAYMENT_METHOD_MONEY_TRANSFER = 'Money transfer';
    const PAYMENT_METHOD_MPASS = 'Mpass';
    const PAYMENT_METHOD_PAY_PAL = 'PayPal';
    const PAYMENT_METHOD_PAY_PAL_PLUS = 'PayPal Plus';
    const PAYMENT_METHOD_RAKUTEN = 'Rakuten';
    const PAYMENT_METHOD_SOFORTUEBERWEISUNGDE = 'sofortueberweisung.de';
    const PAYMENT_METHOD_YAPITAL = 'YAPITAL';
    const PAYMENT_METHOD_OTHER = 'Other';
    const STATUS_CANCELED = 'canceled';
    const STATUS_CONFIRMED = 'confirmed';
    const STATUS_EDITABLE = 'editable';
    const STATUS_FINISHED = 'finished';
    const STATUS_INACTIVE = 'inactive';
    const STATUS_ORPHAN = 'orphan';
    const STATUS_PAYMENT_PENDING = 'payment_pending';
    const STATUS_PAYOUT = 'payout';
    const STATUS_PAID = 'paid';
    const STATUS_PENDING = 'pending';
    const STATUS_SHIPPED = 'shipped';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageServiceAllowableValues()
    {
        return [
            self::PACKAGE_SERVICE_ANY,
            self::PACKAGE_SERVICE_DHL,
            self::PACKAGE_SERVICE_DHL_INTERNATIONAL,
            self::PACKAGE_SERVICE_DPD,
            self::PACKAGE_SERVICE_FEDEX,
            self::PACKAGE_SERVICE_HERMES,
            self::PACKAGE_SERVICE_NONE,
            self::PACKAGE_SERVICE_OTHER,
            self::PACKAGE_SERVICE_STANDARD,
            self::PACKAGE_SERVICE_UPS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_AMAZON,
            self::PAYMENT_METHOD_AMAZON_PAY,
            self::PAYMENT_METHOD_CASH_ON_DELIVERY,
            self::PAYMENT_METHOD_CASH_ON_PICKUP,
            self::PAYMENT_METHOD_CLICKAND_BUY,
            self::PAYMENT_METHOD_CREDIT_CARD,
            self::PAYMENT_METHOD_DEBIT,
            self::PAYMENT_METHOD_GIROPAY,
            self::PAYMENT_METHOD_INVOICE,
            self::PAYMENT_METHOD_KLARNA_CHECKOUT,
            self::PAYMENT_METHOD_MONEY_TRANSFER,
            self::PAYMENT_METHOD_MPASS,
            self::PAYMENT_METHOD_PAY_PAL,
            self::PAYMENT_METHOD_PAY_PAL_PLUS,
            self::PAYMENT_METHOD_RAKUTEN,
            self::PAYMENT_METHOD_SOFORTUEBERWEISUNGDE,
            self::PAYMENT_METHOD_YAPITAL,
            self::PAYMENT_METHOD_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CANCELED,
            self::STATUS_CONFIRMED,
            self::STATUS_EDITABLE,
            self::STATUS_FINISHED,
            self::STATUS_INACTIVE,
            self::STATUS_ORPHAN,
            self::STATUS_PAYMENT_PENDING,
            self::STATUS_PAYOUT,
            self::STATUS_PAID,
            self::STATUS_PENDING,
            self::STATUS_SHIPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aftertax_total'] = isset($data['aftertax_total']) ? $data['aftertax_total'] : null;
        $this->container['amazon_order_id'] = isset($data['amazon_order_id']) ? $data['amazon_order_id'] : null;
        $this->container['buyer_id'] = isset($data['buyer_id']) ? $data['buyer_id'] : null;
        $this->container['comment_client'] = isset($data['comment_client']) ? $data['comment_client'] : null;
        $this->container['comment_merchant'] = isset($data['comment_merchant']) ? $data['comment_merchant'] : null;
        $this->container['date_approved'] = isset($data['date_approved']) ? $data['date_approved'] : null;
        $this->container['date_cancelled'] = isset($data['date_cancelled']) ? $data['date_cancelled'] : null;
        $this->container['date_changed'] = isset($data['date_changed']) ? $data['date_changed'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_paid'] = isset($data['date_paid']) ? $data['date_paid'] : null;
        $this->container['date_shipped'] = isset($data['date_shipped']) ? $data['date_shipped'] : null;
        $this->container['earliest_ship_date'] = isset($data['earliest_ship_date']) ? $data['earliest_ship_date'] : null;
        $this->container['ebay_order_id'] = isset($data['ebay_order_id']) ? $data['ebay_order_id'] : null;
        $this->container['ebay_payment_status'] = isset($data['ebay_payment_status']) ? $data['ebay_payment_status'] : null;
        $this->container['fulfillment_channel'] = isset($data['fulfillment_channel']) ? $data['fulfillment_channel'] : null;
        $this->container['hood_order_id'] = isset($data['hood_order_id']) ? $data['hood_order_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['increment_id'] = isset($data['increment_id']) ? $data['increment_id'] : null;
        $this->container['invoice_address_id'] = isset($data['invoice_address_id']) ? $data['invoice_address_id'] : null;
        $this->container['invoice_no'] = isset($data['invoice_no']) ? $data['invoice_no'] : null;
        $this->container['is_ebay_plus'] = isset($data['is_ebay_plus']) ? $data['is_ebay_plus'] : null;
        $this->container['is_pickup'] = isset($data['is_pickup']) ? $data['is_pickup'] : null;
        $this->container['is_premium_order'] = isset($data['is_premium_order']) ? $data['is_premium_order'] : null;
        $this->container['is_prime'] = isset($data['is_prime']) ? $data['is_prime'] : null;
        $this->container['label_ids'] = isset($data['label_ids']) ? $data['label_ids'] : null;
        $this->container['latest_ship_date'] = isset($data['latest_ship_date']) ? $data['latest_ship_date'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['number_of_items_shipped'] = isset($data['number_of_items_shipped']) ? $data['number_of_items_shipped'] : null;
        $this->container['number_of_items_unshipped'] = isset($data['number_of_items_unshipped']) ? $data['number_of_items_unshipped'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_no'] = isset($data['order_no']) ? $data['order_no'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['package_service'] = isset($data['package_service']) ? $data['package_service'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['position_ids'] = isset($data['position_ids']) ? $data['position_ids'] : null;
        $this->container['pretax_total'] = isset($data['pretax_total']) ? $data['pretax_total'] : null;
        $this->container['purchased_order_number'] = isset($data['purchased_order_number']) ? $data['purchased_order_number'] : null;
        $this->container['refund_requested'] = isset($data['refund_requested']) ? $data['refund_requested'] : null;
        $this->container['remote_allowed_shipping_methods'] = isset($data['remote_allowed_shipping_methods']) ? $data['remote_allowed_shipping_methods'] : null;
        $this->container['sales_channel'] = isset($data['sales_channel']) ? $data['sales_channel'] : null;
        $this->container['seller_email'] = isset($data['seller_email']) ? $data['seller_email'] : null;
        $this->container['ship_method'] = isset($data['ship_method']) ? $data['ship_method'] : null;
        $this->container['ship_method_code'] = isset($data['ship_method_code']) ? $data['ship_method_code'] : null;
        $this->container['ship_service_level'] = isset($data['ship_service_level']) ? $data['ship_service_level'] : null;
        $this->container['shipment_increment_id'] = isset($data['shipment_increment_id']) ? $data['shipment_increment_id'] : null;
        $this->container['shipment_method'] = isset($data['shipment_method']) ? $data['shipment_method'] : null;
        $this->container['shipment_offer_ids'] = isset($data['shipment_offer_ids']) ? $data['shipment_offer_ids'] : null;
        $this->container['shipment_offers_available'] = isset($data['shipment_offers_available']) ? $data['shipment_offers_available'] : null;
        $this->container['shipment_service_level_category'] = isset($data['shipment_service_level_category']) ? $data['shipment_service_level_category'] : null;
        $this->container['shipped_by_amazon_tfm'] = isset($data['shipped_by_amazon_tfm']) ? $data['shipped_by_amazon_tfm'] : null;
        $this->container['shipping_address_id'] = isset($data['shipping_address_id']) ? $data['shipping_address_id'] : null;
        $this->container['shipping_cost'] = isset($data['shipping_cost']) ? $data['shipping_cost'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['tracking_number_id'] = isset($data['tracking_number_id']) ? $data['tracking_number_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['aftertax_total'] === null) {
            $invalidProperties[] = "'aftertax_total' can't be null";
        }
        if ($this->container['date_changed'] === null) {
            $invalidProperties[] = "'date_changed' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_pickup'] === null) {
            $invalidProperties[] = "'is_pickup' can't be null";
        }
        $allowedValues = $this->getPackageServiceAllowableValues();
        if (!in_array($this->container['package_service'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_service', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($this->container['payment_method'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipment_method'] === null) {
            $invalidProperties[] = "'shipment_method' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['aftertax_total'] === null) {
            return false;
        }
        if ($this->container['date_changed'] === null) {
            return false;
        }
        if ($this->container['date_created'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['is_pickup'] === null) {
            return false;
        }
        $allowedValues = $this->getPackageServiceAllowableValues();
        if (!in_array($this->container['package_service'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($this->container['payment_method'], $allowedValues)) {
            return false;
        }
        if ($this->container['shipment_method'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets aftertax_total
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getAftertaxTotal()
    {
        return $this->container['aftertax_total'];
    }

    /**
     * Sets aftertax_total
     *
     * @param \Unifysell\SDK\Model\Money $aftertax_total aftertax_total
     *
     * @return $this
     */
    public function setAftertaxTotal($aftertax_total)
    {
        $this->container['aftertax_total'] = $aftertax_total;

        return $this;
    }

    /**
     * Gets amazon_order_id
     *
     * @return string
     */
    public function getAmazonOrderId()
    {
        return $this->container['amazon_order_id'];
    }

    /**
     * Sets amazon_order_id
     *
     * @param string $amazon_order_id The official internal amazon id.
     *
     * @return $this
     */
    public function setAmazonOrderId($amazon_order_id)
    {
        $this->container['amazon_order_id'] = $amazon_order_id;

        return $this;
    }

    /**
     * Gets buyer_id
     *
     * @return int
     */
    public function getBuyerId()
    {
        return $this->container['buyer_id'];
    }

    /**
     * Sets buyer_id
     *
     * @param int $buyer_id Referencing the buyer.
     *
     * @return $this
     */
    public function setBuyerId($buyer_id)
    {
        $this->container['buyer_id'] = $buyer_id;

        return $this;
    }

    /**
     * Gets comment_client
     *
     * @return string
     */
    public function getCommentClient()
    {
        return $this->container['comment_client'];
    }

    /**
     * Sets comment_client
     *
     * @param string $comment_client A comment by the buyer.
     *
     * @return $this
     */
    public function setCommentClient($comment_client)
    {
        $this->container['comment_client'] = $comment_client;

        return $this;
    }

    /**
     * Gets comment_merchant
     *
     * @return string
     */
    public function getCommentMerchant()
    {
        return $this->container['comment_merchant'];
    }

    /**
     * Sets comment_merchant
     *
     * @param string $comment_merchant A comment by the seller.
     *
     * @return $this
     */
    public function setCommentMerchant($comment_merchant)
    {
        $this->container['comment_merchant'] = $comment_merchant;

        return $this;
    }

    /**
     * Gets date_approved
     *
     * @return string
     */
    public function getDateApproved()
    {
        return $this->container['date_approved'];
    }

    /**
     * Sets date_approved
     *
     * @param string $date_approved The date when the order started.
     *
     * @return $this
     */
    public function setDateApproved($date_approved)
    {
        $this->container['date_approved'] = $date_approved;

        return $this;
    }

    /**
     * Gets date_cancelled
     *
     * @return string
     */
    public function getDateCancelled()
    {
        return $this->container['date_cancelled'];
    }

    /**
     * Sets date_cancelled
     *
     * @param string $date_cancelled If the order is cancelled, the time when the cancelation happend.
     *
     * @return $this
     */
    public function setDateCancelled($date_cancelled)
    {
        $this->container['date_cancelled'] = $date_cancelled;

        return $this;
    }

    /**
     * Gets date_changed
     *
     * @return string
     */
    public function getDateChanged()
    {
        return $this->container['date_changed'];
    }

    /**
     * Sets date_changed
     *
     * @param string $date_changed Last time the order was mutated.
     *
     * @return $this
     */
    public function setDateChanged($date_changed)
    {
        $this->container['date_changed'] = $date_changed;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created The first time the order was seen by unifysell.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_paid
     *
     * @return string
     */
    public function getDatePaid()
    {
        return $this->container['date_paid'];
    }

    /**
     * Sets date_paid
     *
     * @param string $date_paid The time when the order was paid by the buyer.
     *
     * @return $this
     */
    public function setDatePaid($date_paid)
    {
        $this->container['date_paid'] = $date_paid;

        return $this;
    }

    /**
     * Gets date_shipped
     *
     * @return string
     */
    public function getDateShipped()
    {
        return $this->container['date_shipped'];
    }

    /**
     * Sets date_shipped
     *
     * @param string $date_shipped The time when the order was marked as shipped.
     *
     * @return $this
     */
    public function setDateShipped($date_shipped)
    {
        $this->container['date_shipped'] = $date_shipped;

        return $this;
    }

    /**
     * Gets earliest_ship_date
     *
     * @return string
     */
    public function getEarliestShipDate()
    {
        return $this->container['earliest_ship_date'];
    }

    /**
     * Sets earliest_ship_date
     *
     * @param string $earliest_ship_date Together with latestShipDate it gives the allowed shipping interval.
     *
     * @return $this
     */
    public function setEarliestShipDate($earliest_ship_date)
    {
        $this->container['earliest_ship_date'] = $earliest_ship_date;

        return $this;
    }

    /**
     * Gets ebay_order_id
     *
     * @return string
     */
    public function getEbayOrderId()
    {
        return $this->container['ebay_order_id'];
    }

    /**
     * Sets ebay_order_id
     *
     * @param string $ebay_order_id The order id set by eBay.
     *
     * @return $this
     */
    public function setEbayOrderId($ebay_order_id)
    {
        $this->container['ebay_order_id'] = $ebay_order_id;

        return $this;
    }

    /**
     * Gets ebay_payment_status
     *
     * @return string
     */
    public function getEbayPaymentStatus()
    {
        return $this->container['ebay_payment_status'];
    }

    /**
     * Sets ebay_payment_status
     *
     * @param string $ebay_payment_status Ebays internal payment status.
     *
     * @return $this
     */
    public function setEbayPaymentStatus($ebay_payment_status)
    {
        $this->container['ebay_payment_status'] = $ebay_payment_status;

        return $this;
    }

    /**
     * Gets fulfillment_channel
     *
     * @return string
     */
    public function getFulfillmentChannel()
    {
        return $this->container['fulfillment_channel'];
    }

    /**
     * Sets fulfillment_channel
     *
     * @param string $fulfillment_channel How the order was fulfilled: by Amazon (AFN) or by the seller (MFN).
     *
     * @return $this
     */
    public function setFulfillmentChannel($fulfillment_channel)
    {
        $this->container['fulfillment_channel'] = $fulfillment_channel;

        return $this;
    }

    /**
     * Gets hood_order_id
     *
     * @return string
     */
    public function getHoodOrderId()
    {
        return $this->container['hood_order_id'];
    }

    /**
     * Sets hood_order_id
     *
     * @param string $hood_order_id The official hood identifier of the order.
     *
     * @return $this
     */
    public function setHoodOrderId($hood_order_id)
    {
        $this->container['hood_order_id'] = $hood_order_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Internal unifysell id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets increment_id
     *
     * @return string
     */
    public function getIncrementId()
    {
        return $this->container['increment_id'];
    }

    /**
     * Sets increment_id
     *
     * @param string $increment_id The magento identifier to the order.
     *
     * @return $this
     */
    public function setIncrementId($increment_id)
    {
        $this->container['increment_id'] = $increment_id;

        return $this;
    }

    /**
     * Gets invoice_address_id
     *
     * @return int
     */
    public function getInvoiceAddressId()
    {
        return $this->container['invoice_address_id'];
    }

    /**
     * Sets invoice_address_id
     *
     * @param int $invoice_address_id Referencing the address to send the invoice to.
     *
     * @return $this
     */
    public function setInvoiceAddressId($invoice_address_id)
    {
        $this->container['invoice_address_id'] = $invoice_address_id;

        return $this;
    }

    /**
     * Gets invoice_no
     *
     * @return string
     */
    public function getInvoiceNo()
    {
        return $this->container['invoice_no'];
    }

    /**
     * Sets invoice_no
     *
     * @param string $invoice_no The official rakuten identifier of the orders invoice.
     *
     * @return $this
     */
    public function setInvoiceNo($invoice_no)
    {
        $this->container['invoice_no'] = $invoice_no;

        return $this;
    }

    /**
     * Gets is_ebay_plus
     *
     * @return bool
     */
    public function getIsEbayPlus()
    {
        return $this->container['is_ebay_plus'];
    }

    /**
     * Sets is_ebay_plus
     *
     * @param bool $is_ebay_plus Defines wether the order was bought via ebay plus.
     *
     * @return $this
     */
    public function setIsEbayPlus($is_ebay_plus)
    {
        $this->container['is_ebay_plus'] = $is_ebay_plus;

        return $this;
    }

    /**
     * Gets is_pickup
     *
     * @return bool
     */
    public function getIsPickup()
    {
        return $this->container['is_pickup'];
    }

    /**
     * Sets is_pickup
     *
     * @param bool $is_pickup Is set to true, if the order is not sent to the buyer, but the buyer will pick it up himself.
     *
     * @return $this
     */
    public function setIsPickup($is_pickup)
    {
        $this->container['is_pickup'] = $is_pickup;

        return $this;
    }

    /**
     * Gets is_premium_order
     *
     * @return bool
     */
    public function getIsPremiumOrder()
    {
        return $this->container['is_premium_order'];
    }

    /**
     * Sets is_premium_order
     *
     * @param bool $is_premium_order True if the order has a Premium Shipping Service Level Agreement with Amazon.
     *
     * @return $this
     */
    public function setIsPremiumOrder($is_premium_order)
    {
        $this->container['is_premium_order'] = $is_premium_order;

        return $this;
    }

    /**
     * Gets is_prime
     *
     * @return bool
     */
    public function getIsPrime()
    {
        return $this->container['is_prime'];
    }

    /**
     * Sets is_prime
     *
     * @param bool $is_prime Defines if the order was sold through amazon prime.
     *
     * @return $this
     */
    public function setIsPrime($is_prime)
    {
        $this->container['is_prime'] = $is_prime;

        return $this;
    }

    /**
     * Gets label_ids
     *
     * @return string[]
     */
    public function getLabelIds()
    {
        return $this->container['label_ids'];
    }

    /**
     * Sets label_ids
     *
     * @param string[] $label_ids List of all label references.
     *
     * @return $this
     */
    public function setLabelIds($label_ids)
    {
        $this->container['label_ids'] = $label_ids;

        return $this;
    }

    /**
     * Gets latest_ship_date
     *
     * @return string
     */
    public function getLatestShipDate()
    {
        return $this->container['latest_ship_date'];
    }

    /**
     * Sets latest_ship_date
     *
     * @param string $latest_ship_date Together with earliestShipDate it gives the allowed shipping interval.
     *
     * @return $this
     */
    public function setLatestShipDate($latest_ship_date)
    {
        $this->container['latest_ship_date'] = $latest_ship_date;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note by the buyer.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets number_of_items_shipped
     *
     * @return int
     */
    public function getNumberOfItemsShipped()
    {
        return $this->container['number_of_items_shipped'];
    }

    /**
     * Sets number_of_items_shipped
     *
     * @param int $number_of_items_shipped The number of shipped items.
     *
     * @return $this
     */
    public function setNumberOfItemsShipped($number_of_items_shipped)
    {
        $this->container['number_of_items_shipped'] = $number_of_items_shipped;

        return $this;
    }

    /**
     * Gets number_of_items_unshipped
     *
     * @return int
     */
    public function getNumberOfItemsUnshipped()
    {
        return $this->container['number_of_items_unshipped'];
    }

    /**
     * Sets number_of_items_unshipped
     *
     * @param int $number_of_items_unshipped The number of unshipped items.
     *
     * @return $this
     */
    public function setNumberOfItemsUnshipped($number_of_items_unshipped)
    {
        $this->container['number_of_items_unshipped'] = $number_of_items_unshipped;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The internal magento identifier.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_no
     *
     * @return string
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param string $order_no The official rakuten identifier of the order.
     *
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type The type of the order. Only Japan allows other than StandardOrder.
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets package_service
     *
     * @return string
     */
    public function getPackageService()
    {
        return $this->container['package_service'];
    }

    /**
     * Sets package_service
     *
     * @param string $package_service The name of the package service sending the shipment.
     *
     * @return $this
     */
    public function setPackageService($package_service)
    {
        $allowedValues = $this->getPackageServiceAllowableValues();
        if (!is_null($package_service) && !in_array($package_service, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_service', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_service'] = $package_service;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method The method the buyer used to pay.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($payment_method) && !in_array($payment_method, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets position_ids
     *
     * @return string[]
     */
    public function getPositionIds()
    {
        return $this->container['position_ids'];
    }

    /**
     * Sets position_ids
     *
     * @param string[] $position_ids List of all position references.
     *
     * @return $this
     */
    public function setPositionIds($position_ids)
    {
        $this->container['position_ids'] = $position_ids;

        return $this;
    }

    /**
     * Gets pretax_total
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getPretaxTotal()
    {
        return $this->container['pretax_total'];
    }

    /**
     * Sets pretax_total
     *
     * @param \Unifysell\SDK\Model\Money $pretax_total pretax_total
     *
     * @return $this
     */
    public function setPretaxTotal($pretax_total)
    {
        $this->container['pretax_total'] = $pretax_total;

        return $this;
    }

    /**
     * Gets purchased_order_number
     *
     * @return string
     */
    public function getPurchasedOrderNumber()
    {
        return $this->container['purchased_order_number'];
    }

    /**
     * Sets purchased_order_number
     *
     * @param string $purchased_order_number The amazon purchase order (PO) number entered by the buyer at checkout.
     *
     * @return $this
     */
    public function setPurchasedOrderNumber($purchased_order_number)
    {
        $this->container['purchased_order_number'] = $purchased_order_number;

        return $this;
    }

    /**
     * Gets refund_requested
     *
     * @return bool
     */
    public function getRefundRequested()
    {
        return $this->container['refund_requested'];
    }

    /**
     * Sets refund_requested
     *
     * @param bool $refund_requested Defines if a refund was requested.
     *
     * @return $this
     */
    public function setRefundRequested($refund_requested)
    {
        $this->container['refund_requested'] = $refund_requested;

        return $this;
    }

    /**
     * Gets remote_allowed_shipping_methods
     *
     * @return string[]
     */
    public function getRemoteAllowedShippingMethods()
    {
        return $this->container['remote_allowed_shipping_methods'];
    }

    /**
     * Sets remote_allowed_shipping_methods
     *
     * @param string[] $remote_allowed_shipping_methods A list of allowed shipping methods.
     *
     * @return $this
     */
    public function setRemoteAllowedShippingMethods($remote_allowed_shipping_methods)
    {
        $this->container['remote_allowed_shipping_methods'] = $remote_allowed_shipping_methods;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return string
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param string $sales_channel The amazon sales channel of the first item in the order.
     *
     * @return $this
     */
    public function setSalesChannel($sales_channel)
    {
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets seller_email
     *
     * @return string
     */
    public function getSellerEmail()
    {
        return $this->container['seller_email'];
    }

    /**
     * Sets seller_email
     *
     * @param string $seller_email The email of the orders seller.
     *
     * @return $this
     */
    public function setSellerEmail($seller_email)
    {
        $this->container['seller_email'] = $seller_email;

        return $this;
    }

    /**
     * Gets ship_method
     *
     * @return string
     */
    public function getShipMethod()
    {
        return $this->container['ship_method'];
    }

    /**
     * Sets ship_method
     *
     * @param string $ship_method The shipping method.
     *
     * @return $this
     */
    public function setShipMethod($ship_method)
    {
        $this->container['ship_method'] = $ship_method;

        return $this;
    }

    /**
     * Gets ship_method_code
     *
     * @return string
     */
    public function getShipMethodCode()
    {
        return $this->container['ship_method_code'];
    }

    /**
     * Sets ship_method_code
     *
     * @param string $ship_method_code A code referencing the shpping method.
     *
     * @return $this
     */
    public function setShipMethodCode($ship_method_code)
    {
        $this->container['ship_method_code'] = $ship_method_code;

        return $this;
    }

    /**
     * Gets ship_service_level
     *
     * @return string
     */
    public function getShipServiceLevel()
    {
        return $this->container['ship_service_level'];
    }

    /**
     * Sets ship_service_level
     *
     * @param string $ship_service_level The amazon shipment service level of the order.
     *
     * @return $this
     */
    public function setShipServiceLevel($ship_service_level)
    {
        $this->container['ship_service_level'] = $ship_service_level;

        return $this;
    }

    /**
     * Gets shipment_increment_id
     *
     * @return string
     */
    public function getShipmentIncrementId()
    {
        return $this->container['shipment_increment_id'];
    }

    /**
     * Sets shipment_increment_id
     *
     * @param string $shipment_increment_id The id of the added shipment of the order.
     *
     * @return $this
     */
    public function setShipmentIncrementId($shipment_increment_id)
    {
        $this->container['shipment_increment_id'] = $shipment_increment_id;

        return $this;
    }

    /**
     * Gets shipment_method
     *
     * @return string
     */
    public function getShipmentMethod()
    {
        return $this->container['shipment_method'];
    }

    /**
     * Sets shipment_method
     *
     * @param string $shipment_method The type of shipment.
     *
     * @return $this
     */
    public function setShipmentMethod($shipment_method)
    {
        $this->container['shipment_method'] = $shipment_method;

        return $this;
    }

    /**
     * Gets shipment_offer_ids
     *
     * @return string[]
     */
    public function getShipmentOfferIds()
    {
        return $this->container['shipment_offer_ids'];
    }

    /**
     * Sets shipment_offer_ids
     *
     * @param string[] $shipment_offer_ids List of all available shipment offers.
     *
     * @return $this
     */
    public function setShipmentOfferIds($shipment_offer_ids)
    {
        $this->container['shipment_offer_ids'] = $shipment_offer_ids;

        return $this;
    }

    /**
     * Gets shipment_offers_available
     *
     * @return bool
     */
    public function getShipmentOffersAvailable()
    {
        return $this->container['shipment_offers_available'];
    }

    /**
     * Sets shipment_offers_available
     *
     * @param bool $shipment_offers_available Is set to true, if the order is not sent to the buyer, but the buyer will pick it up himself.
     *
     * @return $this
     */
    public function setShipmentOffersAvailable($shipment_offers_available)
    {
        $this->container['shipment_offers_available'] = $shipment_offers_available;

        return $this;
    }

    /**
     * Gets shipment_service_level_category
     *
     * @return string
     */
    public function getShipmentServiceLevelCategory()
    {
        return $this->container['shipment_service_level_category'];
    }

    /**
     * Sets shipment_service_level_category
     *
     * @param string $shipment_service_level_category The amazon shipment service level category of the order.
     *
     * @return $this
     */
    public function setShipmentServiceLevelCategory($shipment_service_level_category)
    {
        $this->container['shipment_service_level_category'] = $shipment_service_level_category;

        return $this;
    }

    /**
     * Gets shipped_by_amazon_tfm
     *
     * @return bool
     */
    public function getShippedByAmazonTfm()
    {
        return $this->container['shipped_by_amazon_tfm'];
    }

    /**
     * Sets shipped_by_amazon_tfm
     *
     * @param bool $shipped_by_amazon_tfm Defines if Amazon Transportation for Merchants was selected.
     *
     * @return $this
     */
    public function setShippedByAmazonTfm($shipped_by_amazon_tfm)
    {
        $this->container['shipped_by_amazon_tfm'] = $shipped_by_amazon_tfm;

        return $this;
    }

    /**
     * Gets shipping_address_id
     *
     * @return int
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     *
     * @param int $shipping_address_id Referencing the address to ship the order to.
     *
     * @return $this
     */
    public function setShippingAddressId($shipping_address_id)
    {
        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param \Unifysell\SDK\Model\Money $shipping_cost shipping_cost
     *
     * @return $this
     */
    public function setShippingCost($shipping_cost)
    {
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the order: defines the state of payment and shipment or cancellation.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id The id of the store the order is in.
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets tracking_number_id
     *
     * @return string
     */
    public function getTrackingNumberId()
    {
        return $this->container['tracking_number_id'];
    }

    /**
     * Sets tracking_number_id
     *
     * @param string $tracking_number_id The id of the added shipment track.
     *
     * @return $this
     */
    public function setTrackingNumberId($tracking_number_id)
    {
        $this->container['tracking_number_id'] = $tracking_number_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


