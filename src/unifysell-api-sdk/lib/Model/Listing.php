<?php
/**
 * Listing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * Listing Class Doc Comment
 *
 * @category Class
 * @description Listing object schema.
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Listing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Listing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asin3' => 'string',
'ebay_item_id' => 'string',
'seller_sku' => 'string',
'date_changed' => 'string',
'start_price' => '\Unifysell\SDK\Model\Money',
'qty_processed' => 'int',
'shipping_group' => 'int',
'id_type' => 'string',
'has_variants' => 'bool',
'shop_category_id' => 'string',
'set_id' => 'string',
'url_marketing' => 'string',
'mpn' => 'string',
'ean' => 'string',
'auction_id' => 'string',
'increment' => 'float',
'is_shown_on_homepage' => 'bool',
'is_planned' => 'bool',
'quantity' => 'int',
'description' => 'string',
'isbn' => 'string',
'date_created' => 'string',
'url' => 'string',
'product_id' => 'string',
'listing_id' => 'string',
'asin2' => 'string',
'watch_count' => 'int',
'category_ids' => 'int[]',
'article_current_price' => '\Unifysell\SDK\Model\Money',
'asin' => 'string',
'producer' => 'string',
'is_visible' => 'bool',
'buy_now_price' => '\Unifysell\SDK\Model\Money',
'url_portal' => 'string',
'price_reduced_type' => 'string',
'status' => 'string',
'is_connect' => 'bool',
'marketplace_id' => 'int',
'url_shop' => 'string',
'qty_date' => 'string',
'min_order_qty' => 'int',
'note' => 'string',
'baseprice_unit' => 'string',
'qty_old' => 'int',
'type' => 'string',
'price' => '\Unifysell\SDK\Model\Money',
'delivery' => 'string',
'cross_selling_title' => 'string',
'upc' => 'string',
'is_available' => 'bool',
'minimum_bid_price' => '\Unifysell\SDK\Model\Money',
'asin1' => 'string',
'baseprice_volume' => 'float',
'rakuten_category_id' => 'string',
'id' => 'int',
'is_stock_policed' => 'bool',
'date_quantity_changed' => 'string',
'platform_sku' => 'string',
'price_reduced' => '\Unifysell\SDK\Model\Money',
'tax' => 'float',
'is_closed' => 'bool',
'date_started' => 'string',
'date_finished' => 'string',
'title' => 'string',
'staggering' => 'string',
'article_id' => 'string',
'comment' => 'string',
'inci' => 'string',
'auction_mode_id' => 'string',
'language_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asin3' => null,
'ebay_item_id' => null,
'seller_sku' => null,
'date_changed' => 'datetime',
'start_price' => null,
'qty_processed' => null,
'shipping_group' => null,
'id_type' => null,
'has_variants' => null,
'shop_category_id' => null,
'set_id' => null,
'url_marketing' => null,
'mpn' => null,
'ean' => null,
'auction_id' => null,
'increment' => 'float',
'is_shown_on_homepage' => null,
'is_planned' => null,
'quantity' => null,
'description' => null,
'isbn' => null,
'date_created' => 'datetime',
'url' => null,
'product_id' => null,
'listing_id' => null,
'asin2' => null,
'watch_count' => null,
'category_ids' => null,
'article_current_price' => null,
'asin' => null,
'producer' => null,
'is_visible' => null,
'buy_now_price' => null,
'url_portal' => null,
'price_reduced_type' => null,
'status' => null,
'is_connect' => null,
'marketplace_id' => null,
'url_shop' => null,
'qty_date' => 'datetime',
'min_order_qty' => null,
'note' => null,
'baseprice_unit' => null,
'qty_old' => null,
'type' => null,
'price' => null,
'delivery' => null,
'cross_selling_title' => null,
'upc' => null,
'is_available' => null,
'minimum_bid_price' => null,
'asin1' => null,
'baseprice_volume' => 'float',
'rakuten_category_id' => null,
'id' => null,
'is_stock_policed' => null,
'date_quantity_changed' => 'datetime',
'platform_sku' => null,
'price_reduced' => null,
'tax' => 'float',
'is_closed' => null,
'date_started' => 'datetime',
'date_finished' => 'datetime',
'title' => null,
'staggering' => null,
'article_id' => null,
'comment' => null,
'inci' => null,
'auction_mode_id' => null,
'language_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asin3' => 'asin3',
'ebay_item_id' => 'ebayItemId',
'seller_sku' => 'sellerSku',
'date_changed' => 'dateChanged',
'start_price' => 'startPrice',
'qty_processed' => 'qtyProcessed',
'shipping_group' => 'shippingGroup',
'id_type' => 'idType',
'has_variants' => 'hasVariants',
'shop_category_id' => 'shopCategoryId',
'set_id' => 'setId',
'url_marketing' => 'urlMarketing',
'mpn' => 'mpn',
'ean' => 'ean',
'auction_id' => 'auctionId',
'increment' => 'increment',
'is_shown_on_homepage' => 'isShownOnHomepage',
'is_planned' => 'isPlanned',
'quantity' => 'quantity',
'description' => 'description',
'isbn' => 'isbn',
'date_created' => 'dateCreated',
'url' => 'url',
'product_id' => 'productId',
'listing_id' => 'listingId',
'asin2' => 'asin2',
'watch_count' => 'watchCount',
'category_ids' => 'categoryIds',
'article_current_price' => 'articleCurrentPrice',
'asin' => 'asin',
'producer' => 'producer',
'is_visible' => 'isVisible',
'buy_now_price' => 'buyNowPrice',
'url_portal' => 'urlPortal',
'price_reduced_type' => 'priceReducedType',
'status' => 'status',
'is_connect' => 'isConnect',
'marketplace_id' => 'marketplaceId',
'url_shop' => 'urlShop',
'qty_date' => 'qtyDate',
'min_order_qty' => 'minOrderQty',
'note' => 'note',
'baseprice_unit' => 'basepriceUnit',
'qty_old' => 'qtyOld',
'type' => 'type',
'price' => 'price',
'delivery' => 'delivery',
'cross_selling_title' => 'crossSellingTitle',
'upc' => 'upc',
'is_available' => 'isAvailable',
'minimum_bid_price' => 'minimumBidPrice',
'asin1' => 'asin1',
'baseprice_volume' => 'basepriceVolume',
'rakuten_category_id' => 'rakutenCategoryId',
'id' => 'id',
'is_stock_policed' => 'isStockPoliced',
'date_quantity_changed' => 'dateQuantityChanged',
'platform_sku' => 'platformSku',
'price_reduced' => 'priceReduced',
'tax' => 'tax',
'is_closed' => 'isClosed',
'date_started' => 'dateStarted',
'date_finished' => 'dateFinished',
'title' => 'title',
'staggering' => 'staggering',
'article_id' => 'articleId',
'comment' => 'comment',
'inci' => 'inci',
'auction_mode_id' => 'auctionModeId',
'language_id' => 'languageId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asin3' => 'setAsin3',
'ebay_item_id' => 'setEbayItemId',
'seller_sku' => 'setSellerSku',
'date_changed' => 'setDateChanged',
'start_price' => 'setStartPrice',
'qty_processed' => 'setQtyProcessed',
'shipping_group' => 'setShippingGroup',
'id_type' => 'setIdType',
'has_variants' => 'setHasVariants',
'shop_category_id' => 'setShopCategoryId',
'set_id' => 'setSetId',
'url_marketing' => 'setUrlMarketing',
'mpn' => 'setMpn',
'ean' => 'setEan',
'auction_id' => 'setAuctionId',
'increment' => 'setIncrement',
'is_shown_on_homepage' => 'setIsShownOnHomepage',
'is_planned' => 'setIsPlanned',
'quantity' => 'setQuantity',
'description' => 'setDescription',
'isbn' => 'setIsbn',
'date_created' => 'setDateCreated',
'url' => 'setUrl',
'product_id' => 'setProductId',
'listing_id' => 'setListingId',
'asin2' => 'setAsin2',
'watch_count' => 'setWatchCount',
'category_ids' => 'setCategoryIds',
'article_current_price' => 'setArticleCurrentPrice',
'asin' => 'setAsin',
'producer' => 'setProducer',
'is_visible' => 'setIsVisible',
'buy_now_price' => 'setBuyNowPrice',
'url_portal' => 'setUrlPortal',
'price_reduced_type' => 'setPriceReducedType',
'status' => 'setStatus',
'is_connect' => 'setIsConnect',
'marketplace_id' => 'setMarketplaceId',
'url_shop' => 'setUrlShop',
'qty_date' => 'setQtyDate',
'min_order_qty' => 'setMinOrderQty',
'note' => 'setNote',
'baseprice_unit' => 'setBasepriceUnit',
'qty_old' => 'setQtyOld',
'type' => 'setType',
'price' => 'setPrice',
'delivery' => 'setDelivery',
'cross_selling_title' => 'setCrossSellingTitle',
'upc' => 'setUpc',
'is_available' => 'setIsAvailable',
'minimum_bid_price' => 'setMinimumBidPrice',
'asin1' => 'setAsin1',
'baseprice_volume' => 'setBasepriceVolume',
'rakuten_category_id' => 'setRakutenCategoryId',
'id' => 'setId',
'is_stock_policed' => 'setIsStockPoliced',
'date_quantity_changed' => 'setDateQuantityChanged',
'platform_sku' => 'setPlatformSku',
'price_reduced' => 'setPriceReduced',
'tax' => 'setTax',
'is_closed' => 'setIsClosed',
'date_started' => 'setDateStarted',
'date_finished' => 'setDateFinished',
'title' => 'setTitle',
'staggering' => 'setStaggering',
'article_id' => 'setArticleId',
'comment' => 'setComment',
'inci' => 'setInci',
'auction_mode_id' => 'setAuctionModeId',
'language_id' => 'setLanguageId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asin3' => 'getAsin3',
'ebay_item_id' => 'getEbayItemId',
'seller_sku' => 'getSellerSku',
'date_changed' => 'getDateChanged',
'start_price' => 'getStartPrice',
'qty_processed' => 'getQtyProcessed',
'shipping_group' => 'getShippingGroup',
'id_type' => 'getIdType',
'has_variants' => 'getHasVariants',
'shop_category_id' => 'getShopCategoryId',
'set_id' => 'getSetId',
'url_marketing' => 'getUrlMarketing',
'mpn' => 'getMpn',
'ean' => 'getEan',
'auction_id' => 'getAuctionId',
'increment' => 'getIncrement',
'is_shown_on_homepage' => 'getIsShownOnHomepage',
'is_planned' => 'getIsPlanned',
'quantity' => 'getQuantity',
'description' => 'getDescription',
'isbn' => 'getIsbn',
'date_created' => 'getDateCreated',
'url' => 'getUrl',
'product_id' => 'getProductId',
'listing_id' => 'getListingId',
'asin2' => 'getAsin2',
'watch_count' => 'getWatchCount',
'category_ids' => 'getCategoryIds',
'article_current_price' => 'getArticleCurrentPrice',
'asin' => 'getAsin',
'producer' => 'getProducer',
'is_visible' => 'getIsVisible',
'buy_now_price' => 'getBuyNowPrice',
'url_portal' => 'getUrlPortal',
'price_reduced_type' => 'getPriceReducedType',
'status' => 'getStatus',
'is_connect' => 'getIsConnect',
'marketplace_id' => 'getMarketplaceId',
'url_shop' => 'getUrlShop',
'qty_date' => 'getQtyDate',
'min_order_qty' => 'getMinOrderQty',
'note' => 'getNote',
'baseprice_unit' => 'getBasepriceUnit',
'qty_old' => 'getQtyOld',
'type' => 'getType',
'price' => 'getPrice',
'delivery' => 'getDelivery',
'cross_selling_title' => 'getCrossSellingTitle',
'upc' => 'getUpc',
'is_available' => 'getIsAvailable',
'minimum_bid_price' => 'getMinimumBidPrice',
'asin1' => 'getAsin1',
'baseprice_volume' => 'getBasepriceVolume',
'rakuten_category_id' => 'getRakutenCategoryId',
'id' => 'getId',
'is_stock_policed' => 'getIsStockPoliced',
'date_quantity_changed' => 'getDateQuantityChanged',
'platform_sku' => 'getPlatformSku',
'price_reduced' => 'getPriceReduced',
'tax' => 'getTax',
'is_closed' => 'getIsClosed',
'date_started' => 'getDateStarted',
'date_finished' => 'getDateFinished',
'title' => 'getTitle',
'staggering' => 'getStaggering',
'article_id' => 'getArticleId',
'comment' => 'getComment',
'inci' => 'getInci',
'auction_mode_id' => 'getAuctionModeId',
'language_id' => 'getLanguageId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asin3'] = isset($data['asin3']) ? $data['asin3'] : null;
        $this->container['ebay_item_id'] = isset($data['ebay_item_id']) ? $data['ebay_item_id'] : null;
        $this->container['seller_sku'] = isset($data['seller_sku']) ? $data['seller_sku'] : null;
        $this->container['date_changed'] = isset($data['date_changed']) ? $data['date_changed'] : null;
        $this->container['start_price'] = isset($data['start_price']) ? $data['start_price'] : null;
        $this->container['qty_processed'] = isset($data['qty_processed']) ? $data['qty_processed'] : null;
        $this->container['shipping_group'] = isset($data['shipping_group']) ? $data['shipping_group'] : null;
        $this->container['id_type'] = isset($data['id_type']) ? $data['id_type'] : null;
        $this->container['has_variants'] = isset($data['has_variants']) ? $data['has_variants'] : null;
        $this->container['shop_category_id'] = isset($data['shop_category_id']) ? $data['shop_category_id'] : null;
        $this->container['set_id'] = isset($data['set_id']) ? $data['set_id'] : null;
        $this->container['url_marketing'] = isset($data['url_marketing']) ? $data['url_marketing'] : null;
        $this->container['mpn'] = isset($data['mpn']) ? $data['mpn'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['auction_id'] = isset($data['auction_id']) ? $data['auction_id'] : null;
        $this->container['increment'] = isset($data['increment']) ? $data['increment'] : null;
        $this->container['is_shown_on_homepage'] = isset($data['is_shown_on_homepage']) ? $data['is_shown_on_homepage'] : null;
        $this->container['is_planned'] = isset($data['is_planned']) ? $data['is_planned'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['isbn'] = isset($data['isbn']) ? $data['isbn'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['listing_id'] = isset($data['listing_id']) ? $data['listing_id'] : null;
        $this->container['asin2'] = isset($data['asin2']) ? $data['asin2'] : null;
        $this->container['watch_count'] = isset($data['watch_count']) ? $data['watch_count'] : null;
        $this->container['category_ids'] = isset($data['category_ids']) ? $data['category_ids'] : null;
        $this->container['article_current_price'] = isset($data['article_current_price']) ? $data['article_current_price'] : null;
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['producer'] = isset($data['producer']) ? $data['producer'] : null;
        $this->container['is_visible'] = isset($data['is_visible']) ? $data['is_visible'] : null;
        $this->container['buy_now_price'] = isset($data['buy_now_price']) ? $data['buy_now_price'] : null;
        $this->container['url_portal'] = isset($data['url_portal']) ? $data['url_portal'] : null;
        $this->container['price_reduced_type'] = isset($data['price_reduced_type']) ? $data['price_reduced_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_connect'] = isset($data['is_connect']) ? $data['is_connect'] : null;
        $this->container['marketplace_id'] = isset($data['marketplace_id']) ? $data['marketplace_id'] : null;
        $this->container['url_shop'] = isset($data['url_shop']) ? $data['url_shop'] : null;
        $this->container['qty_date'] = isset($data['qty_date']) ? $data['qty_date'] : null;
        $this->container['min_order_qty'] = isset($data['min_order_qty']) ? $data['min_order_qty'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['baseprice_unit'] = isset($data['baseprice_unit']) ? $data['baseprice_unit'] : null;
        $this->container['qty_old'] = isset($data['qty_old']) ? $data['qty_old'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['cross_selling_title'] = isset($data['cross_selling_title']) ? $data['cross_selling_title'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['is_available'] = isset($data['is_available']) ? $data['is_available'] : null;
        $this->container['minimum_bid_price'] = isset($data['minimum_bid_price']) ? $data['minimum_bid_price'] : null;
        $this->container['asin1'] = isset($data['asin1']) ? $data['asin1'] : null;
        $this->container['baseprice_volume'] = isset($data['baseprice_volume']) ? $data['baseprice_volume'] : null;
        $this->container['rakuten_category_id'] = isset($data['rakuten_category_id']) ? $data['rakuten_category_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_stock_policed'] = isset($data['is_stock_policed']) ? $data['is_stock_policed'] : null;
        $this->container['date_quantity_changed'] = isset($data['date_quantity_changed']) ? $data['date_quantity_changed'] : null;
        $this->container['platform_sku'] = isset($data['platform_sku']) ? $data['platform_sku'] : null;
        $this->container['price_reduced'] = isset($data['price_reduced']) ? $data['price_reduced'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['is_closed'] = isset($data['is_closed']) ? $data['is_closed'] : null;
        $this->container['date_started'] = isset($data['date_started']) ? $data['date_started'] : null;
        $this->container['date_finished'] = isset($data['date_finished']) ? $data['date_finished'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['staggering'] = isset($data['staggering']) ? $data['staggering'] : null;
        $this->container['article_id'] = isset($data['article_id']) ? $data['article_id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['inci'] = isset($data['inci']) ? $data['inci'] : null;
        $this->container['auction_mode_id'] = isset($data['auction_mode_id']) ? $data['auction_mode_id'] : null;
        $this->container['language_id'] = isset($data['language_id']) ? $data['language_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asin3
     *
     * @return string
     */
    public function getAsin3()
    {
        return $this->container['asin3'];
    }

    /**
     * Sets asin3
     *
     * @param string $asin3 An asin of the listing. Set on amazon.
     *
     * @return $this
     */
    public function setAsin3($asin3)
    {
        $this->container['asin3'] = $asin3;

        return $this;
    }

    /**
     * Gets ebay_item_id
     *
     * @return string
     */
    public function getEbayItemId()
    {
        return $this->container['ebay_item_id'];
    }

    /**
     * Sets ebay_item_id
     *
     * @param string $ebay_item_id Ebays internal listing identifier.
     *
     * @return $this
     */
    public function setEbayItemId($ebay_item_id)
    {
        $this->container['ebay_item_id'] = $ebay_item_id;

        return $this;
    }

    /**
     * Gets seller_sku
     *
     * @return string
     */
    public function getSellerSku()
    {
        return $this->container['seller_sku'];
    }

    /**
     * Sets seller_sku
     *
     * @param string $seller_sku An amazon listing identifier given by the seller.
     *
     * @return $this
     */
    public function setSellerSku($seller_sku)
    {
        $this->container['seller_sku'] = $seller_sku;

        return $this;
    }

    /**
     * Gets date_changed
     *
     * @return string
     */
    public function getDateChanged()
    {
        return $this->container['date_changed'];
    }

    /**
     * Sets date_changed
     *
     * @param string $date_changed Timestamp of the latest update to the listing.
     *
     * @return $this
     */
    public function setDateChanged($date_changed)
    {
        $this->container['date_changed'] = $date_changed;

        return $this;
    }

    /**
     * Gets start_price
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getStartPrice()
    {
        return $this->container['start_price'];
    }

    /**
     * Sets start_price
     *
     * @param \Unifysell\SDK\Model\Money $start_price start_price
     *
     * @return $this
     */
    public function setStartPrice($start_price)
    {
        $this->container['start_price'] = $start_price;

        return $this;
    }

    /**
     * Gets qty_processed
     *
     * @return int
     */
    public function getQtyProcessed()
    {
        return $this->container['qty_processed'];
    }

    /**
     * Sets qty_processed
     *
     * @param int $qty_processed The quantity of processed magento listings.
     *
     * @return $this
     */
    public function setQtyProcessed($qty_processed)
    {
        $this->container['qty_processed'] = $qty_processed;

        return $this;
    }

    /**
     * Gets shipping_group
     *
     * @return int
     */
    public function getShippingGroup()
    {
        return $this->container['shipping_group'];
    }

    /**
     * Sets shipping_group
     *
     * @param int $shipping_group Gives the rakuten id of the shipping group.
     *
     * @return $this
     */
    public function setShippingGroup($shipping_group)
    {
        $this->container['shipping_group'] = $shipping_group;

        return $this;
    }

    /**
     * Gets id_type
     *
     * @return string
     */
    public function getIdType()
    {
        return $this->container['id_type'];
    }

    /**
     * Sets id_type
     *
     * @param string $id_type The idType of the listing on amazon.
     *
     * @return $this
     */
    public function setIdType($id_type)
    {
        $this->container['id_type'] = $id_type;

        return $this;
    }

    /**
     * Gets has_variants
     *
     * @return bool
     */
    public function getHasVariants()
    {
        return $this->container['has_variants'];
    }

    /**
     * Sets has_variants
     *
     * @param bool $has_variants Tells if the listing has variants on rakuten.
     *
     * @return $this
     */
    public function setHasVariants($has_variants)
    {
        $this->container['has_variants'] = $has_variants;

        return $this;
    }

    /**
     * Gets shop_category_id
     *
     * @return string
     */
    public function getShopCategoryId()
    {
        return $this->container['shop_category_id'];
    }

    /**
     * Sets shop_category_id
     *
     * @param string $shop_category_id The category id of a rakuten listing. Pointing to a shop category.
     *
     * @return $this
     */
    public function setShopCategoryId($shop_category_id)
    {
        $this->container['shop_category_id'] = $shop_category_id;

        return $this;
    }

    /**
     * Gets set_id
     *
     * @return string
     */
    public function getSetId()
    {
        return $this->container['set_id'];
    }

    /**
     * Sets set_id
     *
     * @param string $set_id Gives the magento set of the listing.
     *
     * @return $this
     */
    public function setSetId($set_id)
    {
        $this->container['set_id'] = $set_id;

        return $this;
    }

    /**
     * Gets url_marketing
     *
     * @return string
     */
    public function getUrlMarketing()
    {
        return $this->container['url_marketing'];
    }

    /**
     * Sets url_marketing
     *
     * @param string $url_marketing The marketing url on rakuten.
     *
     * @return $this
     */
    public function setUrlMarketing($url_marketing)
    {
        $this->container['url_marketing'] = $url_marketing;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string $mpn The mpn identifier of a listing on rakuten.
     *
     * @return $this
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean International Article Number / European Article Number.
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets auction_id
     *
     * @return string
     */
    public function getAuctionId()
    {
        return $this->container['auction_id'];
    }

    /**
     * Sets auction_id
     *
     * @param string $auction_id Hoods internal listing identifier.
     *
     * @return $this
     */
    public function setAuctionId($auction_id)
    {
        $this->container['auction_id'] = $auction_id;

        return $this;
    }

    /**
     * Gets increment
     *
     * @return float
     */
    public function getIncrement()
    {
        return $this->container['increment'];
    }

    /**
     * Sets increment
     *
     * @param float $increment The incremental step for an auction bid on ricardo.
     *
     * @return $this
     */
    public function setIncrement($increment)
    {
        $this->container['increment'] = $increment;

        return $this;
    }

    /**
     * Gets is_shown_on_homepage
     *
     * @return bool
     */
    public function getIsShownOnHomepage()
    {
        return $this->container['is_shown_on_homepage'];
    }

    /**
     * Sets is_shown_on_homepage
     *
     * @param bool $is_shown_on_homepage Defines if the listing is shown on the homepage on rakuten.
     *
     * @return $this
     */
    public function setIsShownOnHomepage($is_shown_on_homepage)
    {
        $this->container['is_shown_on_homepage'] = $is_shown_on_homepage;

        return $this;
    }

    /**
     * Gets is_planned
     *
     * @return bool
     */
    public function getIsPlanned()
    {
        return $this->container['is_planned'];
    }

    /**
     * Sets is_planned
     *
     * @param bool $is_planned Defines wether a ricardo listing is just planned yet.
     *
     * @return $this
     */
    public function setIsPlanned($is_planned)
    {
        $this->container['is_planned'] = $is_planned;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity available of the listing.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Describes the listing and the related product to be sold.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string $isbn The isbn number of the listings product.
     *
     * @return $this
     */
    public function setIsbn($isbn)
    {
        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created Timestamp of creation of the listing.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The url. The listing can be reached calling it.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id Magentos and Rakutens internal listing identifier.
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets listing_id
     *
     * @return string
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param string $listing_id A unique identifier of the listing on amazon.
     *
     * @return $this
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets asin2
     *
     * @return string
     */
    public function getAsin2()
    {
        return $this->container['asin2'];
    }

    /**
     * Sets asin2
     *
     * @param string $asin2 An asin of the listing. Set on amazon.
     *
     * @return $this
     */
    public function setAsin2($asin2)
    {
        $this->container['asin2'] = $asin2;

        return $this;
    }

    /**
     * Gets watch_count
     *
     * @return int
     */
    public function getWatchCount()
    {
        return $this->container['watch_count'];
    }

    /**
     * Sets watch_count
     *
     * @param int $watch_count Gives the number of watchers for the listing.
     *
     * @return $this
     */
    public function setWatchCount($watch_count)
    {
        $this->container['watch_count'] = $watch_count;

        return $this;
    }

    /**
     * Gets category_ids
     *
     * @return int[]
     */
    public function getCategoryIds()
    {
        return $this->container['category_ids'];
    }

    /**
     * Sets category_ids
     *
     * @param int[] $category_ids A list of category ids the listing is part of.
     *
     * @return $this
     */
    public function setCategoryIds($category_ids)
    {
        $this->container['category_ids'] = $category_ids;

        return $this;
    }

    /**
     * Gets article_current_price
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getArticleCurrentPrice()
    {
        return $this->container['article_current_price'];
    }

    /**
     * Sets article_current_price
     *
     * @param \Unifysell\SDK\Model\Money $article_current_price article_current_price
     *
     * @return $this
     */
    public function setArticleCurrentPrice($article_current_price)
    {
        $this->container['article_current_price'] = $article_current_price;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return string
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string $asin An asin of the listing. Set on amazon.
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets producer
     *
     * @return string
     */
    public function getProducer()
    {
        return $this->container['producer'];
    }

    /**
     * Sets producer
     *
     * @param string $producer The producer of a rakuten listings product.
     *
     * @return $this
     */
    public function setProducer($producer)
    {
        $this->container['producer'] = $producer;

        return $this;
    }

    /**
     * Gets is_visible
     *
     * @return bool
     */
    public function getIsVisible()
    {
        return $this->container['is_visible'];
    }

    /**
     * Sets is_visible
     *
     * @param bool $is_visible Defines if the listing is visible on rakuten.
     *
     * @return $this
     */
    public function setIsVisible($is_visible)
    {
        $this->container['is_visible'] = $is_visible;

        return $this;
    }

    /**
     * Gets buy_now_price
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getBuyNowPrice()
    {
        return $this->container['buy_now_price'];
    }

    /**
     * Sets buy_now_price
     *
     * @param \Unifysell\SDK\Model\Money $buy_now_price buy_now_price
     *
     * @return $this
     */
    public function setBuyNowPrice($buy_now_price)
    {
        $this->container['buy_now_price'] = $buy_now_price;

        return $this;
    }

    /**
     * Gets url_portal
     *
     * @return string
     */
    public function getUrlPortal()
    {
        return $this->container['url_portal'];
    }

    /**
     * Sets url_portal
     *
     * @param string $url_portal The url to the portal on rakuten.
     *
     * @return $this
     */
    public function setUrlPortal($url_portal)
    {
        $this->container['url_portal'] = $url_portal;

        return $this;
    }

    /**
     * Gets price_reduced_type
     *
     * @return string
     */
    public function getPriceReducedType()
    {
        return $this->container['price_reduced_type'];
    }

    /**
     * Sets price_reduced_type
     *
     * @param string $price_reduced_type Defines rakutens type of a reduced listing price.
     *
     * @return $this
     */
    public function setPriceReducedType($price_reduced_type)
    {
        $this->container['price_reduced_type'] = $price_reduced_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the listing.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_connect
     *
     * @return bool
     */
    public function getIsConnect()
    {
        return $this->container['is_connect'];
    }

    /**
     * Sets is_connect
     *
     * @param bool $is_connect Defines wether isConnect service is enabled.
     *
     * @return $this
     */
    public function setIsConnect($is_connect)
    {
        $this->container['is_connect'] = $is_connect;

        return $this;
    }

    /**
     * Gets marketplace_id
     *
     * @return int
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     *
     * @param int $marketplace_id The unifysell id of the marketplace the listing is available on.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplace_id)
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets url_shop
     *
     * @return string
     */
    public function getUrlShop()
    {
        return $this->container['url_shop'];
    }

    /**
     * Sets url_shop
     *
     * @param string $url_shop The url to the shop on rakuten.
     *
     * @return $this
     */
    public function setUrlShop($url_shop)
    {
        $this->container['url_shop'] = $url_shop;

        return $this;
    }

    /**
     * Gets qty_date
     *
     * @return string
     */
    public function getQtyDate()
    {
        return $this->container['qty_date'];
    }

    /**
     * Sets qty_date
     *
     * @param string $qty_date This timestamp gives the last quantity change on magento.
     *
     * @return $this
     */
    public function setQtyDate($qty_date)
    {
        $this->container['qty_date'] = $qty_date;

        return $this;
    }

    /**
     * Gets min_order_qty
     *
     * @return int
     */
    public function getMinOrderQty()
    {
        return $this->container['min_order_qty'];
    }

    /**
     * Sets min_order_qty
     *
     * @param int $min_order_qty Gives the minimum quantity to buy at once of a rakuten listing.
     *
     * @return $this
     */
    public function setMinOrderQty($min_order_qty)
    {
        $this->container['min_order_qty'] = $min_order_qty;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note set to the listing of amazon.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets baseprice_unit
     *
     * @return string
     */
    public function getBasepriceUnit()
    {
        return $this->container['baseprice_unit'];
    }

    /**
     * Sets baseprice_unit
     *
     * @param string $baseprice_unit Gives the unit of the price property on rakuten.
     *
     * @return $this
     */
    public function setBasepriceUnit($baseprice_unit)
    {
        $this->container['baseprice_unit'] = $baseprice_unit;

        return $this;
    }

    /**
     * Gets qty_old
     *
     * @return int
     */
    public function getQtyOld()
    {
        return $this->container['qty_old'];
    }

    /**
     * Sets qty_old
     *
     * @param int $qty_old The quantity of a listing on magento.
     *
     * @return $this
     */
    public function setQtyOld($qty_old)
    {
        $this->container['qty_old'] = $qty_old;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The magento listing type.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Unifysell\SDK\Model\Money $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return string
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param string $delivery The delivery options chosen for the listing.
     *
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets cross_selling_title
     *
     * @return string
     */
    public function getCrossSellingTitle()
    {
        return $this->container['cross_selling_title'];
    }

    /**
     * Sets cross_selling_title
     *
     * @param string $cross_selling_title The listings title for rakuten cross selling.
     *
     * @return $this
     */
    public function setCrossSellingTitle($cross_selling_title)
    {
        $this->container['cross_selling_title'] = $cross_selling_title;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc The upc number of the listing.
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets is_available
     *
     * @return bool
     */
    public function getIsAvailable()
    {
        return $this->container['is_available'];
    }

    /**
     * Sets is_available
     *
     * @param bool $is_available Defines if an rakuten listing is available.
     *
     * @return $this
     */
    public function setIsAvailable($is_available)
    {
        $this->container['is_available'] = $is_available;

        return $this;
    }

    /**
     * Gets minimum_bid_price
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getMinimumBidPrice()
    {
        return $this->container['minimum_bid_price'];
    }

    /**
     * Sets minimum_bid_price
     *
     * @param \Unifysell\SDK\Model\Money $minimum_bid_price minimum_bid_price
     *
     * @return $this
     */
    public function setMinimumBidPrice($minimum_bid_price)
    {
        $this->container['minimum_bid_price'] = $minimum_bid_price;

        return $this;
    }

    /**
     * Gets asin1
     *
     * @return string
     */
    public function getAsin1()
    {
        return $this->container['asin1'];
    }

    /**
     * Sets asin1
     *
     * @param string $asin1 An asin of the listing. Set on amazon.
     *
     * @return $this
     */
    public function setAsin1($asin1)
    {
        $this->container['asin1'] = $asin1;

        return $this;
    }

    /**
     * Gets baseprice_volume
     *
     * @return float
     */
    public function getBasepriceVolume()
    {
        return $this->container['baseprice_volume'];
    }

    /**
     * Sets baseprice_volume
     *
     * @param float $baseprice_volume The volume of the base price on rakuten.
     *
     * @return $this
     */
    public function setBasepriceVolume($baseprice_volume)
    {
        $this->container['baseprice_volume'] = $baseprice_volume;

        return $this;
    }

    /**
     * Gets rakuten_category_id
     *
     * @return string
     */
    public function getRakutenCategoryId()
    {
        return $this->container['rakuten_category_id'];
    }

    /**
     * Sets rakuten_category_id
     *
     * @param string $rakuten_category_id The category id of a rakuten listing. Pointing to a rakuten category.
     *
     * @return $this
     */
    public function setRakutenCategoryId($rakuten_category_id)
    {
        $this->container['rakuten_category_id'] = $rakuten_category_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_stock_policed
     *
     * @return bool
     */
    public function getIsStockPoliced()
    {
        return $this->container['is_stock_policed'];
    }

    /**
     * Sets is_stock_policed
     *
     * @param bool $is_stock_policed Defines wether the rakuten stock policy is enabled.
     *
     * @return $this
     */
    public function setIsStockPoliced($is_stock_policed)
    {
        $this->container['is_stock_policed'] = $is_stock_policed;

        return $this;
    }

    /**
     * Gets date_quantity_changed
     *
     * @return string
     */
    public function getDateQuantityChanged()
    {
        return $this->container['date_quantity_changed'];
    }

    /**
     * Sets date_quantity_changed
     *
     * @param string $date_quantity_changed The timestamp when the quantity was changed last.
     *
     * @return $this
     */
    public function setDateQuantityChanged($date_quantity_changed)
    {
        $this->container['date_quantity_changed'] = $date_quantity_changed;

        return $this;
    }

    /**
     * Gets platform_sku
     *
     * @return string
     */
    public function getPlatformSku()
    {
        return $this->container['platform_sku'];
    }

    /**
     * Sets platform_sku
     *
     * @param string $platform_sku A platform identifier of the listing.
     *
     * @return $this
     */
    public function setPlatformSku($platform_sku)
    {
        $this->container['platform_sku'] = $platform_sku;

        return $this;
    }

    /**
     * Gets price_reduced
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getPriceReduced()
    {
        return $this->container['price_reduced'];
    }

    /**
     * Sets price_reduced
     *
     * @param \Unifysell\SDK\Model\Money $price_reduced price_reduced
     *
     * @return $this
     */
    public function setPriceReduced($price_reduced)
    {
        $this->container['price_reduced'] = $price_reduced;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float $tax The tax level which is applied for a listings buy.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool $is_closed Defines wether a ricardo listing has been closed.
     *
     * @return $this
     */
    public function setIsClosed($is_closed)
    {
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets date_started
     *
     * @return string
     */
    public function getDateStarted()
    {
        return $this->container['date_started'];
    }

    /**
     * Sets date_started
     *
     * @param string $date_started A date that gives the start of a listings auction.
     *
     * @return $this
     */
    public function setDateStarted($date_started)
    {
        $this->container['date_started'] = $date_started;

        return $this;
    }

    /**
     * Gets date_finished
     *
     * @return string
     */
    public function getDateFinished()
    {
        return $this->container['date_finished'];
    }

    /**
     * Sets date_finished
     *
     * @param string $date_finished A date that gives the end of a listings auction.
     *
     * @return $this
     */
    public function setDateFinished($date_finished)
    {
        $this->container['date_finished'] = $date_finished;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the listing.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets staggering
     *
     * @return string
     */
    public function getStaggering()
    {
        return $this->container['staggering'];
    }

    /**
     * Sets staggering
     *
     * @param string $staggering staggering
     *
     * @return $this
     */
    public function setStaggering($staggering)
    {
        $this->container['staggering'] = $staggering;

        return $this;
    }

    /**
     * Gets article_id
     *
     * @return string
     */
    public function getArticleId()
    {
        return $this->container['article_id'];
    }

    /**
     * Sets article_id
     *
     * @param string $article_id A unique identifier of the listing on ricardo.
     *
     * @return $this
     */
    public function setArticleId($article_id)
    {
        $this->container['article_id'] = $article_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment A listing comment on rakuten.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets inci
     *
     * @return string
     */
    public function getInci()
    {
        return $this->container['inci'];
    }

    /**
     * Sets inci
     *
     * @param string $inci The inci identifier of a listing on rakuten.
     *
     * @return $this
     */
    public function setInci($inci)
    {
        $this->container['inci'] = $inci;

        return $this;
    }

    /**
     * Gets auction_mode_id
     *
     * @return string
     */
    public function getAuctionModeId()
    {
        return $this->container['auction_mode_id'];
    }

    /**
     * Sets auction_mode_id
     *
     * @param string $auction_mode_id Defines the auction mode set on a hood listing.
     *
     * @return $this
     */
    public function setAuctionModeId($auction_mode_id)
    {
        $this->container['auction_mode_id'] = $auction_mode_id;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return string
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param string $language_id The id of language of the listing on ricardo.
     *
     * @return $this
     */
    public function setLanguageId($language_id)
    {
        $this->container['language_id'] = $language_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
