<?php
/**
 * CreateListingRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * CreateListingRequest Class Doc Comment
 *
 * @category Class
 * @description Request body object for a CreateListingRequest.
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateListingRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateListingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'warranty_description' => 'string',
'warranty' => 'string',
'title' => 'string',
'template_id' => 'string',
'seller_sku' => 'string',
'quantity' => 'int',
'promotions' => 'string[]',
'price' => '\Unifysell\SDK\Model\Money',
'pictures' => '\Unifysell\SDK\Model\CreateListingRequestPictures[]',
'payment_description' => 'string',
'marketplace_id' => 'int',
'description' => 'string',
'delivery_options' => '\Unifysell\SDK\Model\CreateListingRequestDeliveryOptions[]',
'delivery' => 'string',
'date_started' => 'string',
'date_finished' => 'string',
'condition' => 'string',
'category_ids' => 'int[]',
'availability' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'warranty_description' => null,
'warranty' => null,
'title' => null,
'template_id' => null,
'seller_sku' => null,
'quantity' => null,
'promotions' => null,
'price' => null,
'pictures' => null,
'payment_description' => null,
'marketplace_id' => null,
'description' => null,
'delivery_options' => null,
'delivery' => null,
'date_started' => 'datetime',
'date_finished' => 'datetime',
'condition' => null,
'category_ids' => null,
'availability' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warranty_description' => 'warrantyDescription',
'warranty' => 'warranty',
'title' => 'title',
'template_id' => 'templateId',
'seller_sku' => 'sellerSku',
'quantity' => 'quantity',
'promotions' => 'promotions',
'price' => 'price',
'pictures' => 'pictures',
'payment_description' => 'paymentDescription',
'marketplace_id' => 'marketplaceId',
'description' => 'description',
'delivery_options' => 'deliveryOptions',
'delivery' => 'delivery',
'date_started' => 'dateStarted',
'date_finished' => 'dateFinished',
'condition' => 'condition',
'category_ids' => 'categoryIds',
'availability' => 'availability'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warranty_description' => 'setWarrantyDescription',
'warranty' => 'setWarranty',
'title' => 'setTitle',
'template_id' => 'setTemplateId',
'seller_sku' => 'setSellerSku',
'quantity' => 'setQuantity',
'promotions' => 'setPromotions',
'price' => 'setPrice',
'pictures' => 'setPictures',
'payment_description' => 'setPaymentDescription',
'marketplace_id' => 'setMarketplaceId',
'description' => 'setDescription',
'delivery_options' => 'setDeliveryOptions',
'delivery' => 'setDelivery',
'date_started' => 'setDateStarted',
'date_finished' => 'setDateFinished',
'condition' => 'setCondition',
'category_ids' => 'setCategoryIds',
'availability' => 'setAvailability'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warranty_description' => 'getWarrantyDescription',
'warranty' => 'getWarranty',
'title' => 'getTitle',
'template_id' => 'getTemplateId',
'seller_sku' => 'getSellerSku',
'quantity' => 'getQuantity',
'promotions' => 'getPromotions',
'price' => 'getPrice',
'pictures' => 'getPictures',
'payment_description' => 'getPaymentDescription',
'marketplace_id' => 'getMarketplaceId',
'description' => 'getDescription',
'delivery_options' => 'getDeliveryOptions',
'delivery' => 'getDelivery',
'date_started' => 'getDateStarted',
'date_finished' => 'getDateFinished',
'condition' => 'getCondition',
'category_ids' => 'getCategoryIds',
'availability' => 'getAvailability'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WARRANTY_NONE = 'none';
const WARRANTY__1_YEAR = '1 year';
const WARRANTY__2_YEARS = '2 years';
const WARRANTY_SEE_DESCRIPTION = 'see description';
const PROMOTIONS__5_OFF = '5% off';
const PROMOTIONS__10_OFF = '10% off';
const CONDITION__NEW = 'new';
const CONDITION_ORIGINAL_PACKAGE = 'originalPackage';
const CONDITION_USED = 'used';
const CONDITION_COLLECTOR = 'collector';
const CONDITION_DAMAGED = 'damaged';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWarrantyAllowableValues()
    {
        return [
            self::WARRANTY_NONE,
self::WARRANTY__1_YEAR,
self::WARRANTY__2_YEARS,
self::WARRANTY_SEE_DESCRIPTION,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromotionsAllowableValues()
    {
        return [
            self::PROMOTIONS__5_OFF,
self::PROMOTIONS__10_OFF,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConditionAllowableValues()
    {
        return [
            self::CONDITION__NEW,
self::CONDITION_ORIGINAL_PACKAGE,
self::CONDITION_USED,
self::CONDITION_COLLECTOR,
self::CONDITION_DAMAGED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warranty_description'] = isset($data['warranty_description']) ? $data['warranty_description'] : null;
        $this->container['warranty'] = isset($data['warranty']) ? $data['warranty'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['seller_sku'] = isset($data['seller_sku']) ? $data['seller_sku'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['promotions'] = isset($data['promotions']) ? $data['promotions'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['pictures'] = isset($data['pictures']) ? $data['pictures'] : null;
        $this->container['payment_description'] = isset($data['payment_description']) ? $data['payment_description'] : null;
        $this->container['marketplace_id'] = isset($data['marketplace_id']) ? $data['marketplace_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['delivery_options'] = isset($data['delivery_options']) ? $data['delivery_options'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['date_started'] = isset($data['date_started']) ? $data['date_started'] : null;
        $this->container['date_finished'] = isset($data['date_finished']) ? $data['date_finished'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['category_ids'] = isset($data['category_ids']) ? $data['category_ids'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['warranty'] === null) {
            $invalidProperties[] = "'warranty' can't be null";
        }
        $allowedValues = $this->getWarrantyAllowableValues();
        if (!is_null($this->container['warranty']) && !in_array($this->container['warranty'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'warranty', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['seller_sku'] === null) {
            $invalidProperties[] = "'seller_sku' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['pictures'] === null) {
            $invalidProperties[] = "'pictures' can't be null";
        }
        if ($this->container['marketplace_id'] === null) {
            $invalidProperties[] = "'marketplace_id' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['delivery_options'] === null) {
            $invalidProperties[] = "'delivery_options' can't be null";
        }
        if ($this->container['delivery'] === null) {
            $invalidProperties[] = "'delivery' can't be null";
        }
        if ($this->container['condition'] === null) {
            $invalidProperties[] = "'condition' can't be null";
        }
        $allowedValues = $this->getConditionAllowableValues();
        if (!is_null($this->container['condition']) && !in_array($this->container['condition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'condition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['category_ids'] === null) {
            $invalidProperties[] = "'category_ids' can't be null";
        }
        if ($this->container['availability'] === null) {
            $invalidProperties[] = "'availability' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warranty_description
     *
     * @return string
     */
    public function getWarrantyDescription()
    {
        return $this->container['warranty_description'];
    }

    /**
     * Sets warranty_description
     *
     * @param string $warranty_description Give a more detailed description about your warranties.
     *
     * @return $this
     */
    public function setWarrantyDescription($warranty_description)
    {
        $this->container['warranty_description'] = $warranty_description;

        return $this;
    }

    /**
     * Gets warranty
     *
     * @return string
     */
    public function getWarranty()
    {
        return $this->container['warranty'];
    }

    /**
     * Sets warranty
     *
     * @param string $warranty Choose a warranty for the product. Options are defined in an enum.
     *
     * @return $this
     */
    public function setWarranty($warranty)
    {
        $allowedValues = $this->getWarrantyAllowableValues();
        if (!in_array($warranty, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'warranty', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['warranty'] = $warranty;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The name of the article.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string $template_id Give the id of an existing template to be applied on the listing description.
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets seller_sku
     *
     * @return string
     */
    public function getSellerSku()
    {
        return $this->container['seller_sku'];
    }

    /**
     * Sets seller_sku
     *
     * @param string $seller_sku Identifier for sellers internal referencing.
     *
     * @return $this
     */
    public function setSellerSku($seller_sku)
    {
        $this->container['seller_sku'] = $seller_sku;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The amount of articles available for this listing.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return string[]
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param string[] $promotions A list of promotion codes that are available for the listing.
     *
     * @return $this
     */
    public function setPromotions($promotions)
    {
        $allowedValues = $this->getPromotionsAllowableValues();
        if (!is_null($promotions) && array_diff($promotions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'promotions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['promotions'] = $promotions;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Unifysell\SDK\Model\Money $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets pictures
     *
     * @return \Unifysell\SDK\Model\CreateListingRequestPictures[]
     */
    public function getPictures()
    {
        return $this->container['pictures'];
    }

    /**
     * Sets pictures
     *
     * @param \Unifysell\SDK\Model\CreateListingRequestPictures[] $pictures Give a list of pictures.
     *
     * @return $this
     */
    public function setPictures($pictures)
    {
        $this->container['pictures'] = $pictures;

        return $this;
    }

    /**
     * Gets payment_description
     *
     * @return string
     */
    public function getPaymentDescription()
    {
        return $this->container['payment_description'];
    }

    /**
     * Sets payment_description
     *
     * @param string $payment_description Detailed description of available payment options.
     *
     * @return $this
     */
    public function setPaymentDescription($payment_description)
    {
        $this->container['payment_description'] = $payment_description;

        return $this;
    }

    /**
     * Gets marketplace_id
     *
     * @return int
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     *
     * @param int $marketplace_id Id of the marketplace to sell the article on.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplace_id)
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A text describing the sold article.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets delivery_options
     *
     * @return \Unifysell\SDK\Model\CreateListingRequestDeliveryOptions[]
     */
    public function getDeliveryOptions()
    {
        return $this->container['delivery_options'];
    }

    /**
     * Sets delivery_options
     *
     * @param \Unifysell\SDK\Model\CreateListingRequestDeliveryOptions[] $delivery_options Defines the shipping options available for the package. This is only required for several platforms. Give a list of available options.
     *
     * @return $this
     */
    public function setDeliveryOptions($delivery_options)
    {
        $this->container['delivery_options'] = $delivery_options;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return string
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param string $delivery Describes the delivery option for the article.
     *
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets date_started
     *
     * @return string
     */
    public function getDateStarted()
    {
        return $this->container['date_started'];
    }

    /**
     * Sets date_started
     *
     * @param string $date_started This timestamps gives the moment when the listing will become available.
     *
     * @return $this
     */
    public function setDateStarted($date_started)
    {
        $this->container['date_started'] = $date_started;

        return $this;
    }

    /**
     * Gets date_finished
     *
     * @return string
     */
    public function getDateFinished()
    {
        return $this->container['date_finished'];
    }

    /**
     * Sets date_finished
     *
     * @param string $date_finished This timestamps defines when the auction ends.
     *
     * @return $this
     */
    public function setDateFinished($date_finished)
    {
        $this->container['date_finished'] = $date_finished;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition Describes in what condition the sold article is in. See the enum values for more information.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $allowedValues = $this->getConditionAllowableValues();
        if (!in_array($condition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'condition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets category_ids
     *
     * @return int[]
     */
    public function getCategoryIds()
    {
        return $this->container['category_ids'];
    }

    /**
     * Sets category_ids
     *
     * @param int[] $category_ids Give a list of the ids of the listings category.
     *
     * @return $this
     */
    public function setCategoryIds($category_ids)
    {
        $this->container['category_ids'] = $category_ids;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return int
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param int $availability Describes if an article is available right now or when it will be available again.           Measured in days. Set it to 0 if the article is available in stock.
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
