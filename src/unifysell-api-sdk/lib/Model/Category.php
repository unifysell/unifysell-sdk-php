<?php
/**
 * Category
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * Category Class Doc Comment
 *
 * @category Class
 * @description Category schema defines a single Category resource.
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Category implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Category';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_active' => 'bool',
'product_category_id' => 'string',
'is_b2_b_vat_enabled' => 'bool',
'include_in_menu' => 'bool',
'visible' => 'int',
'meta_keywords' => 'string',
'shop_category_id' => 'string',
'position' => 'int',
'description' => 'string',
'is_branding' => 'bool',
'category_id' => 'string',
'url' => 'string',
'external_shop_category_id' => 'string',
'meta_description' => 'string',
'external_parent_shop_category_id' => 'string',
'platform_category_id' => 'string',
'marketplace' => 'int',
'ebay_category_parent_id' => 'string',
'is_leaf_category' => 'bool',
'meta_title' => 'string',
'is_auto_pay_enabled' => 'bool',
'prod_cat_id' => 'string',
'category_type_id' => 'string',
'is_expired' => 'bool',
'category_level' => 'int',
'url_path' => 'string',
'id' => 'string',
'is_final' => 'bool',
'article_type_id' => 'string',
'is_dedicated' => 'bool',
'level' => 'int',
'is_shop_category' => 'bool',
'grid_description' => 'string',
'parent' => 'int',
'title' => 'string',
'ebay_category_id' => 'string',
'partial_url' => 'string',
'url_key' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_active' => null,
'product_category_id' => null,
'is_b2_b_vat_enabled' => null,
'include_in_menu' => null,
'visible' => null,
'meta_keywords' => null,
'shop_category_id' => null,
'position' => null,
'description' => null,
'is_branding' => null,
'category_id' => null,
'url' => null,
'external_shop_category_id' => null,
'meta_description' => null,
'external_parent_shop_category_id' => null,
'platform_category_id' => null,
'marketplace' => null,
'ebay_category_parent_id' => null,
'is_leaf_category' => null,
'meta_title' => null,
'is_auto_pay_enabled' => null,
'prod_cat_id' => null,
'category_type_id' => null,
'is_expired' => null,
'category_level' => null,
'url_path' => null,
'id' => null,
'is_final' => null,
'article_type_id' => null,
'is_dedicated' => null,
'level' => null,
'is_shop_category' => null,
'grid_description' => null,
'parent' => null,
'title' => null,
'ebay_category_id' => null,
'partial_url' => null,
'url_key' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_active' => 'isActive',
'product_category_id' => 'productCategoryId',
'is_b2_b_vat_enabled' => 'isB2BVatEnabled',
'include_in_menu' => 'includeInMenu',
'visible' => 'visible',
'meta_keywords' => 'metaKeywords',
'shop_category_id' => 'shopCategoryId',
'position' => 'position',
'description' => 'description',
'is_branding' => 'isBranding',
'category_id' => 'categoryId',
'url' => 'url',
'external_shop_category_id' => 'externalShopCategoryId',
'meta_description' => 'metaDescription',
'external_parent_shop_category_id' => 'externalParentShopCategoryId',
'platform_category_id' => 'platformCategoryId',
'marketplace' => 'marketplace',
'ebay_category_parent_id' => 'ebayCategoryParentId',
'is_leaf_category' => 'isLeafCategory',
'meta_title' => 'metaTitle',
'is_auto_pay_enabled' => 'isAutoPayEnabled',
'prod_cat_id' => 'prodCatID',
'category_type_id' => 'categoryTypeId',
'is_expired' => 'isExpired',
'category_level' => 'categoryLevel',
'url_path' => 'urlPath',
'id' => 'id',
'is_final' => 'isFinal',
'article_type_id' => 'articleTypeId',
'is_dedicated' => 'isDedicated',
'level' => 'level',
'is_shop_category' => 'isShopCategory',
'grid_description' => 'gridDescription',
'parent' => 'parent',
'title' => 'title',
'ebay_category_id' => 'ebayCategoryId',
'partial_url' => 'partialUrl',
'url_key' => 'urlKey'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_active' => 'setIsActive',
'product_category_id' => 'setProductCategoryId',
'is_b2_b_vat_enabled' => 'setIsB2BVatEnabled',
'include_in_menu' => 'setIncludeInMenu',
'visible' => 'setVisible',
'meta_keywords' => 'setMetaKeywords',
'shop_category_id' => 'setShopCategoryId',
'position' => 'setPosition',
'description' => 'setDescription',
'is_branding' => 'setIsBranding',
'category_id' => 'setCategoryId',
'url' => 'setUrl',
'external_shop_category_id' => 'setExternalShopCategoryId',
'meta_description' => 'setMetaDescription',
'external_parent_shop_category_id' => 'setExternalParentShopCategoryId',
'platform_category_id' => 'setPlatformCategoryId',
'marketplace' => 'setMarketplace',
'ebay_category_parent_id' => 'setEbayCategoryParentId',
'is_leaf_category' => 'setIsLeafCategory',
'meta_title' => 'setMetaTitle',
'is_auto_pay_enabled' => 'setIsAutoPayEnabled',
'prod_cat_id' => 'setProdCatId',
'category_type_id' => 'setCategoryTypeId',
'is_expired' => 'setIsExpired',
'category_level' => 'setCategoryLevel',
'url_path' => 'setUrlPath',
'id' => 'setId',
'is_final' => 'setIsFinal',
'article_type_id' => 'setArticleTypeId',
'is_dedicated' => 'setIsDedicated',
'level' => 'setLevel',
'is_shop_category' => 'setIsShopCategory',
'grid_description' => 'setGridDescription',
'parent' => 'setParent',
'title' => 'setTitle',
'ebay_category_id' => 'setEbayCategoryId',
'partial_url' => 'setPartialUrl',
'url_key' => 'setUrlKey'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_active' => 'getIsActive',
'product_category_id' => 'getProductCategoryId',
'is_b2_b_vat_enabled' => 'getIsB2BVatEnabled',
'include_in_menu' => 'getIncludeInMenu',
'visible' => 'getVisible',
'meta_keywords' => 'getMetaKeywords',
'shop_category_id' => 'getShopCategoryId',
'position' => 'getPosition',
'description' => 'getDescription',
'is_branding' => 'getIsBranding',
'category_id' => 'getCategoryId',
'url' => 'getUrl',
'external_shop_category_id' => 'getExternalShopCategoryId',
'meta_description' => 'getMetaDescription',
'external_parent_shop_category_id' => 'getExternalParentShopCategoryId',
'platform_category_id' => 'getPlatformCategoryId',
'marketplace' => 'getMarketplace',
'ebay_category_parent_id' => 'getEbayCategoryParentId',
'is_leaf_category' => 'getIsLeafCategory',
'meta_title' => 'getMetaTitle',
'is_auto_pay_enabled' => 'getIsAutoPayEnabled',
'prod_cat_id' => 'getProdCatId',
'category_type_id' => 'getCategoryTypeId',
'is_expired' => 'getIsExpired',
'category_level' => 'getCategoryLevel',
'url_path' => 'getUrlPath',
'id' => 'getId',
'is_final' => 'getIsFinal',
'article_type_id' => 'getArticleTypeId',
'is_dedicated' => 'getIsDedicated',
'level' => 'getLevel',
'is_shop_category' => 'getIsShopCategory',
'grid_description' => 'getGridDescription',
'parent' => 'getParent',
'title' => 'getTitle',
'ebay_category_id' => 'getEbayCategoryId',
'partial_url' => 'getPartialUrl',
'url_key' => 'getUrlKey'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['product_category_id'] = isset($data['product_category_id']) ? $data['product_category_id'] : null;
        $this->container['is_b2_b_vat_enabled'] = isset($data['is_b2_b_vat_enabled']) ? $data['is_b2_b_vat_enabled'] : null;
        $this->container['include_in_menu'] = isset($data['include_in_menu']) ? $data['include_in_menu'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['meta_keywords'] = isset($data['meta_keywords']) ? $data['meta_keywords'] : null;
        $this->container['shop_category_id'] = isset($data['shop_category_id']) ? $data['shop_category_id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_branding'] = isset($data['is_branding']) ? $data['is_branding'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['external_shop_category_id'] = isset($data['external_shop_category_id']) ? $data['external_shop_category_id'] : null;
        $this->container['meta_description'] = isset($data['meta_description']) ? $data['meta_description'] : null;
        $this->container['external_parent_shop_category_id'] = isset($data['external_parent_shop_category_id']) ? $data['external_parent_shop_category_id'] : null;
        $this->container['platform_category_id'] = isset($data['platform_category_id']) ? $data['platform_category_id'] : null;
        $this->container['marketplace'] = isset($data['marketplace']) ? $data['marketplace'] : null;
        $this->container['ebay_category_parent_id'] = isset($data['ebay_category_parent_id']) ? $data['ebay_category_parent_id'] : null;
        $this->container['is_leaf_category'] = isset($data['is_leaf_category']) ? $data['is_leaf_category'] : null;
        $this->container['meta_title'] = isset($data['meta_title']) ? $data['meta_title'] : null;
        $this->container['is_auto_pay_enabled'] = isset($data['is_auto_pay_enabled']) ? $data['is_auto_pay_enabled'] : null;
        $this->container['prod_cat_id'] = isset($data['prod_cat_id']) ? $data['prod_cat_id'] : null;
        $this->container['category_type_id'] = isset($data['category_type_id']) ? $data['category_type_id'] : null;
        $this->container['is_expired'] = isset($data['is_expired']) ? $data['is_expired'] : null;
        $this->container['category_level'] = isset($data['category_level']) ? $data['category_level'] : null;
        $this->container['url_path'] = isset($data['url_path']) ? $data['url_path'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_final'] = isset($data['is_final']) ? $data['is_final'] : null;
        $this->container['article_type_id'] = isset($data['article_type_id']) ? $data['article_type_id'] : null;
        $this->container['is_dedicated'] = isset($data['is_dedicated']) ? $data['is_dedicated'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['is_shop_category'] = isset($data['is_shop_category']) ? $data['is_shop_category'] : null;
        $this->container['grid_description'] = isset($data['grid_description']) ? $data['grid_description'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['ebay_category_id'] = isset($data['ebay_category_id']) ? $data['ebay_category_id'] : null;
        $this->container['partial_url'] = isset($data['partial_url']) ? $data['partial_url'] : null;
        $this->container['url_key'] = isset($data['url_key']) ? $data['url_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['platform_category_id'] === null) {
            $invalidProperties[] = "'platform_category_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets product_category_id
     *
     * @return string
     */
    public function getProductCategoryId()
    {
        return $this->container['product_category_id'];
    }

    /**
     * Sets product_category_id
     *
     * @param string $product_category_id product_category_id
     *
     * @return $this
     */
    public function setProductCategoryId($product_category_id)
    {
        $this->container['product_category_id'] = $product_category_id;

        return $this;
    }

    /**
     * Gets is_b2_b_vat_enabled
     *
     * @return bool
     */
    public function getIsB2BVatEnabled()
    {
        return $this->container['is_b2_b_vat_enabled'];
    }

    /**
     * Sets is_b2_b_vat_enabled
     *
     * @param bool $is_b2_b_vat_enabled is_b2_b_vat_enabled
     *
     * @return $this
     */
    public function setIsB2BVatEnabled($is_b2_b_vat_enabled)
    {
        $this->container['is_b2_b_vat_enabled'] = $is_b2_b_vat_enabled;

        return $this;
    }

    /**
     * Gets include_in_menu
     *
     * @return bool
     */
    public function getIncludeInMenu()
    {
        return $this->container['include_in_menu'];
    }

    /**
     * Sets include_in_menu
     *
     * @param bool $include_in_menu include_in_menu
     *
     * @return $this
     */
    public function setIncludeInMenu($include_in_menu)
    {
        $this->container['include_in_menu'] = $include_in_menu;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int $visible visible
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string
     */
    public function getMetaKeywords()
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string $meta_keywords meta_keywords
     *
     * @return $this
     */
    public function setMetaKeywords($meta_keywords)
    {
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets shop_category_id
     *
     * @return string
     */
    public function getShopCategoryId()
    {
        return $this->container['shop_category_id'];
    }

    /**
     * Sets shop_category_id
     *
     * @param string $shop_category_id shop_category_id
     *
     * @return $this
     */
    public function setShopCategoryId($shop_category_id)
    {
        $this->container['shop_category_id'] = $shop_category_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Some channels give a more detailed description for a category.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_branding
     *
     * @return bool
     */
    public function getIsBranding()
    {
        return $this->container['is_branding'];
    }

    /**
     * Sets is_branding
     *
     * @param bool $is_branding is_branding
     *
     * @return $this
     */
    public function setIsBranding($is_branding)
    {
        $this->container['is_branding'] = $is_branding;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets external_shop_category_id
     *
     * @return string
     */
    public function getExternalShopCategoryId()
    {
        return $this->container['external_shop_category_id'];
    }

    /**
     * Sets external_shop_category_id
     *
     * @param string $external_shop_category_id external_shop_category_id
     *
     * @return $this
     */
    public function setExternalShopCategoryId($external_shop_category_id)
    {
        $this->container['external_shop_category_id'] = $external_shop_category_id;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string $meta_description meta_description
     *
     * @return $this
     */
    public function setMetaDescription($meta_description)
    {
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets external_parent_shop_category_id
     *
     * @return string
     */
    public function getExternalParentShopCategoryId()
    {
        return $this->container['external_parent_shop_category_id'];
    }

    /**
     * Sets external_parent_shop_category_id
     *
     * @param string $external_parent_shop_category_id external_parent_shop_category_id
     *
     * @return $this
     */
    public function setExternalParentShopCategoryId($external_parent_shop_category_id)
    {
        $this->container['external_parent_shop_category_id'] = $external_parent_shop_category_id;

        return $this;
    }

    /**
     * Gets platform_category_id
     *
     * @return string
     */
    public function getPlatformCategoryId()
    {
        return $this->container['platform_category_id'];
    }

    /**
     * Sets platform_category_id
     *
     * @param string $platform_category_id Remote/Platform identifier of a category.
     *
     * @return $this
     */
    public function setPlatformCategoryId($platform_category_id)
    {
        $this->container['platform_category_id'] = $platform_category_id;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return int
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param int $marketplace Unifysell identifier of the category's marketplace.
     *
     * @return $this
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets ebay_category_parent_id
     *
     * @return string
     */
    public function getEbayCategoryParentId()
    {
        return $this->container['ebay_category_parent_id'];
    }

    /**
     * Sets ebay_category_parent_id
     *
     * @param string $ebay_category_parent_id ebay_category_parent_id
     *
     * @return $this
     */
    public function setEbayCategoryParentId($ebay_category_parent_id)
    {
        $this->container['ebay_category_parent_id'] = $ebay_category_parent_id;

        return $this;
    }

    /**
     * Gets is_leaf_category
     *
     * @return bool
     */
    public function getIsLeafCategory()
    {
        return $this->container['is_leaf_category'];
    }

    /**
     * Sets is_leaf_category
     *
     * @param bool $is_leaf_category is_leaf_category
     *
     * @return $this
     */
    public function setIsLeafCategory($is_leaf_category)
    {
        $this->container['is_leaf_category'] = $is_leaf_category;

        return $this;
    }

    /**
     * Gets meta_title
     *
     * @return string
     */
    public function getMetaTitle()
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string $meta_title meta_title
     *
     * @return $this
     */
    public function setMetaTitle($meta_title)
    {
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets is_auto_pay_enabled
     *
     * @return bool
     */
    public function getIsAutoPayEnabled()
    {
        return $this->container['is_auto_pay_enabled'];
    }

    /**
     * Sets is_auto_pay_enabled
     *
     * @param bool $is_auto_pay_enabled is_auto_pay_enabled
     *
     * @return $this
     */
    public function setIsAutoPayEnabled($is_auto_pay_enabled)
    {
        $this->container['is_auto_pay_enabled'] = $is_auto_pay_enabled;

        return $this;
    }

    /**
     * Gets prod_cat_id
     *
     * @return string
     */
    public function getProdCatId()
    {
        return $this->container['prod_cat_id'];
    }

    /**
     * Sets prod_cat_id
     *
     * @param string $prod_cat_id prod_cat_id
     *
     * @return $this
     */
    public function setProdCatId($prod_cat_id)
    {
        $this->container['prod_cat_id'] = $prod_cat_id;

        return $this;
    }

    /**
     * Gets category_type_id
     *
     * @return string
     */
    public function getCategoryTypeId()
    {
        return $this->container['category_type_id'];
    }

    /**
     * Sets category_type_id
     *
     * @param string $category_type_id category_type_id
     *
     * @return $this
     */
    public function setCategoryTypeId($category_type_id)
    {
        $this->container['category_type_id'] = $category_type_id;

        return $this;
    }

    /**
     * Gets is_expired
     *
     * @return bool
     */
    public function getIsExpired()
    {
        return $this->container['is_expired'];
    }

    /**
     * Sets is_expired
     *
     * @param bool $is_expired is_expired
     *
     * @return $this
     */
    public function setIsExpired($is_expired)
    {
        $this->container['is_expired'] = $is_expired;

        return $this;
    }

    /**
     * Gets category_level
     *
     * @return int
     */
    public function getCategoryLevel()
    {
        return $this->container['category_level'];
    }

    /**
     * Sets category_level
     *
     * @param int $category_level category_level
     *
     * @return $this
     */
    public function setCategoryLevel($category_level)
    {
        $this->container['category_level'] = $category_level;

        return $this;
    }

    /**
     * Gets url_path
     *
     * @return string
     */
    public function getUrlPath()
    {
        return $this->container['url_path'];
    }

    /**
     * Sets url_path
     *
     * @param string $url_path url_path
     *
     * @return $this
     */
    public function setUrlPath($url_path)
    {
        $this->container['url_path'] = $url_path;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier of category in unifysell context.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_final
     *
     * @return bool
     */
    public function getIsFinal()
    {
        return $this->container['is_final'];
    }

    /**
     * Sets is_final
     *
     * @param bool $is_final is_final
     *
     * @return $this
     */
    public function setIsFinal($is_final)
    {
        $this->container['is_final'] = $is_final;

        return $this;
    }

    /**
     * Gets article_type_id
     *
     * @return string
     */
    public function getArticleTypeId()
    {
        return $this->container['article_type_id'];
    }

    /**
     * Sets article_type_id
     *
     * @param string $article_type_id article_type_id
     *
     * @return $this
     */
    public function setArticleTypeId($article_type_id)
    {
        $this->container['article_type_id'] = $article_type_id;

        return $this;
    }

    /**
     * Gets is_dedicated
     *
     * @return bool
     */
    public function getIsDedicated()
    {
        return $this->container['is_dedicated'];
    }

    /**
     * Sets is_dedicated
     *
     * @param bool $is_dedicated is_dedicated
     *
     * @return $this
     */
    public function setIsDedicated($is_dedicated)
    {
        $this->container['is_dedicated'] = $is_dedicated;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets is_shop_category
     *
     * @return bool
     */
    public function getIsShopCategory()
    {
        return $this->container['is_shop_category'];
    }

    /**
     * Sets is_shop_category
     *
     * @param bool $is_shop_category is_shop_category
     *
     * @return $this
     */
    public function setIsShopCategory($is_shop_category)
    {
        $this->container['is_shop_category'] = $is_shop_category;

        return $this;
    }

    /**
     * Gets grid_description
     *
     * @return string
     */
    public function getGridDescription()
    {
        return $this->container['grid_description'];
    }

    /**
     * Sets grid_description
     *
     * @param string $grid_description grid_description
     *
     * @return $this
     */
    public function setGridDescription($grid_description)
    {
        $this->container['grid_description'] = $grid_description;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return int
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param int $parent Unifysell identifier of the parent category.
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Name of the category.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets ebay_category_id
     *
     * @return string
     */
    public function getEbayCategoryId()
    {
        return $this->container['ebay_category_id'];
    }

    /**
     * Sets ebay_category_id
     *
     * @param string $ebay_category_id ebay_category_id
     *
     * @return $this
     */
    public function setEbayCategoryId($ebay_category_id)
    {
        $this->container['ebay_category_id'] = $ebay_category_id;

        return $this;
    }

    /**
     * Gets partial_url
     *
     * @return string
     */
    public function getPartialUrl()
    {
        return $this->container['partial_url'];
    }

    /**
     * Sets partial_url
     *
     * @param string $partial_url partial_url
     *
     * @return $this
     */
    public function setPartialUrl($partial_url)
    {
        $this->container['partial_url'] = $partial_url;

        return $this;
    }

    /**
     * Gets url_key
     *
     * @return string
     */
    public function getUrlKey()
    {
        return $this->container['url_key'];
    }

    /**
     * Sets url_key
     *
     * @param string $url_key url_key
     *
     * @return $this
     */
    public function setUrlKey($url_key)
    {
        $this->container['url_key'] = $url_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
