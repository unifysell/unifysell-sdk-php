<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description Entity that represents shipping address
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_id' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'amazon_order_id' => 'string',
        'city' => 'string',
        'company' => 'string',
        'country' => 'string',
        'date_changed' => 'string',
        'date_created' => 'string',
        'ebay_address_id' => 'string',
        'gender' => 'string',
        'id' => 'int',
        'identify_key' => 'string',
        'name' => 'string',
        'postal_box' => 'string',
        'state' => 'string',
        'street_number' => 'string',
        'zip_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_id' => null,
        'address_line1' => null,
        'address_line2' => null,
        'amazon_order_id' => null,
        'city' => null,
        'company' => null,
        'country' => null,
        'date_changed' => 'datetime',
        'date_created' => 'datetime',
        'ebay_address_id' => null,
        'gender' => null,
        'id' => null,
        'identify_key' => null,
        'name' => null,
        'postal_box' => null,
        'state' => null,
        'street_number' => null,
        'zip_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_id' => 'addressId',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'amazon_order_id' => 'amazonOrderId',
        'city' => 'city',
        'company' => 'company',
        'country' => 'country',
        'date_changed' => 'dateChanged',
        'date_created' => 'dateCreated',
        'ebay_address_id' => 'ebayAddressId',
        'gender' => 'gender',
        'id' => 'id',
        'identify_key' => 'identifyKey',
        'name' => 'name',
        'postal_box' => 'postalBox',
        'state' => 'state',
        'street_number' => 'streetNumber',
        'zip_code' => 'zipCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_id' => 'setAddressId',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'amazon_order_id' => 'setAmazonOrderId',
        'city' => 'setCity',
        'company' => 'setCompany',
        'country' => 'setCountry',
        'date_changed' => 'setDateChanged',
        'date_created' => 'setDateCreated',
        'ebay_address_id' => 'setEbayAddressId',
        'gender' => 'setGender',
        'id' => 'setId',
        'identify_key' => 'setIdentifyKey',
        'name' => 'setName',
        'postal_box' => 'setPostalBox',
        'state' => 'setState',
        'street_number' => 'setStreetNumber',
        'zip_code' => 'setZipCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_id' => 'getAddressId',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'amazon_order_id' => 'getAmazonOrderId',
        'city' => 'getCity',
        'company' => 'getCompany',
        'country' => 'getCountry',
        'date_changed' => 'getDateChanged',
        'date_created' => 'getDateCreated',
        'ebay_address_id' => 'getEbayAddressId',
        'gender' => 'getGender',
        'id' => 'getId',
        'identify_key' => 'getIdentifyKey',
        'name' => 'getName',
        'postal_box' => 'getPostalBox',
        'state' => 'getState',
        'street_number' => 'getStreetNumber',
        'zip_code' => 'getZipCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_id'] = isset($data['address_id']) ? $data['address_id'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['amazon_order_id'] = isset($data['amazon_order_id']) ? $data['amazon_order_id'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['date_changed'] = isset($data['date_changed']) ? $data['date_changed'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['ebay_address_id'] = isset($data['ebay_address_id']) ? $data['ebay_address_id'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identify_key'] = isset($data['identify_key']) ? $data['identify_key'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['postal_box'] = isset($data['postal_box']) ? $data['postal_box'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets address_id
     *
     * @return string
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string $address_id A unique identifier for magento addressed identifying it on magento
     *
     * @return $this
     */
    public function setAddressId($address_id)
    {
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 First part of the address
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 Second part of the address
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets amazon_order_id
     *
     * @return string
     */
    public function getAmazonOrderId()
    {
        return $this->container['amazon_order_id'];
    }

    /**
     * Sets amazon_order_id
     *
     * @param string $amazon_order_id A unique identifier for amazon addressed identifying it on amazon.
     *
     * @return $this
     */
    public function setAmazonOrderId($amazon_order_id)
    {
        $this->container['amazon_order_id'] = $amazon_order_id;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of the address
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company If there is one, the addressed company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The addressed country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets date_changed
     *
     * @return string
     */
    public function getDateChanged()
    {
        return $this->container['date_changed'];
    }

    /**
     * Sets date_changed
     *
     * @param string $date_changed Timestamp of the latest update to the listing.
     *
     * @return $this
     */
    public function setDateChanged($date_changed)
    {
        $this->container['date_changed'] = $date_changed;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created Timestamp of creation of the listing.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets ebay_address_id
     *
     * @return string
     */
    public function getEbayAddressId()
    {
        return $this->container['ebay_address_id'];
    }

    /**
     * Sets ebay_address_id
     *
     * @param string $ebay_address_id A unique identifier for ebay addressed identifying it on ebay
     *
     * @return $this
     */
    public function setEbayAddressId($ebay_address_id)
    {
        $this->container['ebay_address_id'] = $ebay_address_id;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The gender of the addressed person
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identify_key
     *
     * @return string
     */
    public function getIdentifyKey()
    {
        return $this->container['identify_key'];
    }

    /**
     * Sets identify_key
     *
     * @param string $identify_key A unique identifier for hood addressed identifying it on hood
     *
     * @return $this
     */
    public function setIdentifyKey($identify_key)
    {
        $this->container['identify_key'] = $identify_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the addressed person
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets postal_box
     *
     * @return string
     */
    public function getPostalBox()
    {
        return $this->container['postal_box'];
    }

    /**
     * Sets postal_box
     *
     * @param string $postal_box For ricardo addresses: The number of a postal box.
     *
     * @return $this
     */
    public function setPostalBox($postal_box)
    {
        $this->container['postal_box'] = $postal_box;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The addressed state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number For ricardo addresses: The street number.
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The addresses zip code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


