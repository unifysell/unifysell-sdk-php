<?php
/**
 * V0Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * V0Payment Class Doc Comment
 *
 * @category Class
 * @description A unifysell payment
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V0Payment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V0.Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'booking_text' => 'string',
'description' => 'string',
'id' => 'string',
'partner_account_number' => 'string',
'partner_banking_code' => 'string',
'partner_name' => 'string',
'remote_date_created' => 'string',
'status' => 'string',
'transfer' => '\Unifysell\SDK\Model\Money',
'type' => 'string',
'user_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'booking_text' => null,
'description' => null,
'id' => 'uuid',
'partner_account_number' => null,
'partner_banking_code' => null,
'partner_name' => null,
'remote_date_created' => 'datetime',
'status' => null,
'transfer' => null,
'type' => null,
'user_id' => 'uuid'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'booking_text' => 'bookingText',
'description' => 'description',
'id' => 'id',
'partner_account_number' => 'partnerAccountNumber',
'partner_banking_code' => 'partnerBankingCode',
'partner_name' => 'partnerName',
'remote_date_created' => 'remoteDateCreated',
'status' => 'status',
'transfer' => 'transfer',
'type' => 'type',
'user_id' => 'userId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'booking_text' => 'setBookingText',
'description' => 'setDescription',
'id' => 'setId',
'partner_account_number' => 'setPartnerAccountNumber',
'partner_banking_code' => 'setPartnerBankingCode',
'partner_name' => 'setPartnerName',
'remote_date_created' => 'setRemoteDateCreated',
'status' => 'setStatus',
'transfer' => 'setTransfer',
'type' => 'setType',
'user_id' => 'setUserId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'booking_text' => 'getBookingText',
'description' => 'getDescription',
'id' => 'getId',
'partner_account_number' => 'getPartnerAccountNumber',
'partner_banking_code' => 'getPartnerBankingCode',
'partner_name' => 'getPartnerName',
'remote_date_created' => 'getRemoteDateCreated',
'status' => 'getStatus',
'transfer' => 'getTransfer',
'type' => 'getType',
'user_id' => 'getUserId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_CANCELLED = 'cancelled';
const STATUS_FINISHED = 'finished';
const STATUS_PENDING = 'pending';
const TYPE_BANKING = 'banking';
const TYPE_PAYPAL = 'paypal';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CANCELLED,
self::STATUS_FINISHED,
self::STATUS_PENDING,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BANKING,
self::TYPE_PAYPAL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['booking_text'] = isset($data['booking_text']) ? $data['booking_text'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner_account_number'] = isset($data['partner_account_number']) ? $data['partner_account_number'] : null;
        $this->container['partner_banking_code'] = isset($data['partner_banking_code']) ? $data['partner_banking_code'] : null;
        $this->container['partner_name'] = isset($data['partner_name']) ? $data['partner_name'] : null;
        $this->container['remote_date_created'] = isset($data['remote_date_created']) ? $data['remote_date_created'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['transfer'] = isset($data['transfer']) ? $data['transfer'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transfer'] === null) {
            $invalidProperties[] = "'transfer' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets booking_text
     *
     * @return string
     */
    public function getBookingText()
    {
        return $this->container['booking_text'];
    }

    /**
     * Sets booking_text
     *
     * @param string $booking_text booking_text
     *
     * @return $this
     */
    public function setBookingText($booking_text)
    {
        $this->container['booking_text'] = $booking_text;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner_account_number
     *
     * @return string
     */
    public function getPartnerAccountNumber()
    {
        return $this->container['partner_account_number'];
    }

    /**
     * Sets partner_account_number
     *
     * @param string $partner_account_number partner_account_number
     *
     * @return $this
     */
    public function setPartnerAccountNumber($partner_account_number)
    {
        $this->container['partner_account_number'] = $partner_account_number;

        return $this;
    }

    /**
     * Gets partner_banking_code
     *
     * @return string
     */
    public function getPartnerBankingCode()
    {
        return $this->container['partner_banking_code'];
    }

    /**
     * Sets partner_banking_code
     *
     * @param string $partner_banking_code partner_banking_code
     *
     * @return $this
     */
    public function setPartnerBankingCode($partner_banking_code)
    {
        $this->container['partner_banking_code'] = $partner_banking_code;

        return $this;
    }

    /**
     * Gets partner_name
     *
     * @return string
     */
    public function getPartnerName()
    {
        return $this->container['partner_name'];
    }

    /**
     * Sets partner_name
     *
     * @param string $partner_name partner_name
     *
     * @return $this
     */
    public function setPartnerName($partner_name)
    {
        $this->container['partner_name'] = $partner_name;

        return $this;
    }

    /**
     * Gets remote_date_created
     *
     * @return string
     */
    public function getRemoteDateCreated()
    {
        return $this->container['remote_date_created'];
    }

    /**
     * Sets remote_date_created
     *
     * @param string $remote_date_created The date-time of payment.
     *
     * @return $this
     */
    public function setRemoteDateCreated($remote_date_created)
    {
        $this->container['remote_date_created'] = $remote_date_created;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the payment.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transfer
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getTransfer()
    {
        return $this->container['transfer'];
    }

    /**
     * Sets transfer
     *
     * @param \Unifysell\SDK\Model\Money $transfer transfer
     *
     * @return $this
     */
    public function setTransfer($transfer)
    {
        $this->container['transfer'] = $transfer;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the payment.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id unifysell user id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
