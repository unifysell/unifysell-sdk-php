<?php
/**
 * Channel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * Channel Class Doc Comment
 *
 * @category Class
 * @description This describes a connection to any ecommerce platform.         E.g. Ebay or PayPal or DHL.         It therefor contains usernames, connection endpoints and secrets.
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Channel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_changed' => 'string',
'partnership_password' => 'string',
'shipment_marketplace_id' => 'int',
'account_password' => 'string',
'api_url' => 'string',
'dev_key' => 'string',
'attendance' => 'string',
'access_key' => 'string',
'tracking_id' => 'string',
'channel_type' => 'string',
'ekp_postfix' => 'string',
'prefer_bware' => 'bool',
'is_payment_provider' => 'bool',
'ekp_postfix_rules' => 'string[]',
'dev_password' => 'string',
'signature' => 'string',
'payment_methods' => 'string[]',
'merchant_id' => 'string',
'url_sign_in' => 'string',
'is_shipment_provider' => 'bool',
'app_password' => 'string',
'description' => 'string',
'date_created' => 'string',
'url' => 'string',
'service_url' => 'string',
'password' => 'string',
'deleted' => 'bool',
'secret' => 'string',
'postal_code' => 'string',
'paypal_email_address' => 'string',
'account_name' => 'string',
'app_id' => 'string',
'dev_id' => 'string',
'outline_agreement' => '\Unifysell\SDK\Model\OutlineAgreement',
'channel' => 'string',
'url_finding' => 'string',
'app_key' => 'string',
'secret_key' => 'string',
'marketplace_ids' => 'int[]',
'token' => 'string',
'active' => 'bool',
'store_view' => 'string',
'emails' => 'string[]',
'is_sandbox' => 'bool',
'cert_id' => 'string',
'is_sales_provider' => 'bool',
'tracking_password' => 'string',
'channel_language' => 'string',
'api_password' => 'string',
'partnership_key' => 'string',
'ekp' => 'string',
'id' => 'int',
'api_username' => 'string',
'url_shopping' => 'string',
'group_id' => 'int',
'key' => 'string',
'merchant_channel_id' => 'string',
'app_client_id' => 'string',
'credential' => 'string',
'username' => 'string',
'mws_auth_token' => 'string',
'default_marketplace_id' => 'int',
'title' => 'string',
'marketplace_fallback_id' => 'int',
'url_trading' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_changed' => 'datetime',
'partnership_password' => null,
'shipment_marketplace_id' => null,
'account_password' => null,
'api_url' => null,
'dev_key' => null,
'attendance' => null,
'access_key' => null,
'tracking_id' => null,
'channel_type' => null,
'ekp_postfix' => null,
'prefer_bware' => null,
'is_payment_provider' => null,
'ekp_postfix_rules' => null,
'dev_password' => null,
'signature' => null,
'payment_methods' => null,
'merchant_id' => null,
'url_sign_in' => null,
'is_shipment_provider' => null,
'app_password' => null,
'description' => null,
'date_created' => 'datetime',
'url' => null,
'service_url' => null,
'password' => null,
'deleted' => null,
'secret' => null,
'postal_code' => null,
'paypal_email_address' => null,
'account_name' => null,
'app_id' => null,
'dev_id' => null,
'outline_agreement' => null,
'channel' => null,
'url_finding' => null,
'app_key' => null,
'secret_key' => null,
'marketplace_ids' => null,
'token' => null,
'active' => null,
'store_view' => null,
'emails' => null,
'is_sandbox' => null,
'cert_id' => null,
'is_sales_provider' => null,
'tracking_password' => null,
'channel_language' => null,
'api_password' => null,
'partnership_key' => null,
'ekp' => null,
'id' => null,
'api_username' => null,
'url_shopping' => null,
'group_id' => null,
'key' => null,
'merchant_channel_id' => null,
'app_client_id' => null,
'credential' => null,
'username' => null,
'mws_auth_token' => null,
'default_marketplace_id' => null,
'title' => null,
'marketplace_fallback_id' => null,
'url_trading' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_changed' => 'dateChanged',
'partnership_password' => 'partnershipPassword',
'shipment_marketplace_id' => 'shipmentMarketplaceId',
'account_password' => 'accountPassword',
'api_url' => 'apiUrl',
'dev_key' => 'devKey',
'attendance' => 'attendance',
'access_key' => 'accessKey',
'tracking_id' => 'trackingId',
'channel_type' => 'channelType',
'ekp_postfix' => 'ekpPostfix',
'prefer_bware' => 'preferBware',
'is_payment_provider' => 'isPaymentProvider',
'ekp_postfix_rules' => 'ekpPostfixRules',
'dev_password' => 'devPassword',
'signature' => 'signature',
'payment_methods' => 'paymentMethods',
'merchant_id' => 'merchantId',
'url_sign_in' => 'urlSignIn',
'is_shipment_provider' => 'isShipmentProvider',
'app_password' => 'appPassword',
'description' => 'description',
'date_created' => 'dateCreated',
'url' => 'url',
'service_url' => 'serviceUrl',
'password' => 'password',
'deleted' => 'deleted',
'secret' => 'secret',
'postal_code' => 'postalCode',
'paypal_email_address' => 'paypalEmailAddress',
'account_name' => 'accountName',
'app_id' => 'appId',
'dev_id' => 'devId',
'outline_agreement' => 'outlineAgreement',
'channel' => 'channel',
'url_finding' => 'urlFinding',
'app_key' => 'appKey',
'secret_key' => 'secretKey',
'marketplace_ids' => 'marketplaceIds',
'token' => 'token',
'active' => 'active',
'store_view' => 'storeView',
'emails' => 'emails',
'is_sandbox' => 'isSandbox',
'cert_id' => 'certId',
'is_sales_provider' => 'isSalesProvider',
'tracking_password' => 'trackingPassword',
'channel_language' => 'channelLanguage',
'api_password' => 'apiPassword',
'partnership_key' => 'partnershipKey',
'ekp' => 'ekp',
'id' => 'id',
'api_username' => 'apiUsername',
'url_shopping' => 'urlShopping',
'group_id' => 'groupId',
'key' => 'key',
'merchant_channel_id' => 'merchantChannelId',
'app_client_id' => 'appClientId',
'credential' => 'credential',
'username' => 'username',
'mws_auth_token' => 'mwsAuthToken',
'default_marketplace_id' => 'defaultMarketplaceId',
'title' => 'title',
'marketplace_fallback_id' => 'marketplaceFallbackId',
'url_trading' => 'urlTrading'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_changed' => 'setDateChanged',
'partnership_password' => 'setPartnershipPassword',
'shipment_marketplace_id' => 'setShipmentMarketplaceId',
'account_password' => 'setAccountPassword',
'api_url' => 'setApiUrl',
'dev_key' => 'setDevKey',
'attendance' => 'setAttendance',
'access_key' => 'setAccessKey',
'tracking_id' => 'setTrackingId',
'channel_type' => 'setChannelType',
'ekp_postfix' => 'setEkpPostfix',
'prefer_bware' => 'setPreferBware',
'is_payment_provider' => 'setIsPaymentProvider',
'ekp_postfix_rules' => 'setEkpPostfixRules',
'dev_password' => 'setDevPassword',
'signature' => 'setSignature',
'payment_methods' => 'setPaymentMethods',
'merchant_id' => 'setMerchantId',
'url_sign_in' => 'setUrlSignIn',
'is_shipment_provider' => 'setIsShipmentProvider',
'app_password' => 'setAppPassword',
'description' => 'setDescription',
'date_created' => 'setDateCreated',
'url' => 'setUrl',
'service_url' => 'setServiceUrl',
'password' => 'setPassword',
'deleted' => 'setDeleted',
'secret' => 'setSecret',
'postal_code' => 'setPostalCode',
'paypal_email_address' => 'setPaypalEmailAddress',
'account_name' => 'setAccountName',
'app_id' => 'setAppId',
'dev_id' => 'setDevId',
'outline_agreement' => 'setOutlineAgreement',
'channel' => 'setChannel',
'url_finding' => 'setUrlFinding',
'app_key' => 'setAppKey',
'secret_key' => 'setSecretKey',
'marketplace_ids' => 'setMarketplaceIds',
'token' => 'setToken',
'active' => 'setActive',
'store_view' => 'setStoreView',
'emails' => 'setEmails',
'is_sandbox' => 'setIsSandbox',
'cert_id' => 'setCertId',
'is_sales_provider' => 'setIsSalesProvider',
'tracking_password' => 'setTrackingPassword',
'channel_language' => 'setChannelLanguage',
'api_password' => 'setApiPassword',
'partnership_key' => 'setPartnershipKey',
'ekp' => 'setEkp',
'id' => 'setId',
'api_username' => 'setApiUsername',
'url_shopping' => 'setUrlShopping',
'group_id' => 'setGroupId',
'key' => 'setKey',
'merchant_channel_id' => 'setMerchantChannelId',
'app_client_id' => 'setAppClientId',
'credential' => 'setCredential',
'username' => 'setUsername',
'mws_auth_token' => 'setMwsAuthToken',
'default_marketplace_id' => 'setDefaultMarketplaceId',
'title' => 'setTitle',
'marketplace_fallback_id' => 'setMarketplaceFallbackId',
'url_trading' => 'setUrlTrading'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_changed' => 'getDateChanged',
'partnership_password' => 'getPartnershipPassword',
'shipment_marketplace_id' => 'getShipmentMarketplaceId',
'account_password' => 'getAccountPassword',
'api_url' => 'getApiUrl',
'dev_key' => 'getDevKey',
'attendance' => 'getAttendance',
'access_key' => 'getAccessKey',
'tracking_id' => 'getTrackingId',
'channel_type' => 'getChannelType',
'ekp_postfix' => 'getEkpPostfix',
'prefer_bware' => 'getPreferBware',
'is_payment_provider' => 'getIsPaymentProvider',
'ekp_postfix_rules' => 'getEkpPostfixRules',
'dev_password' => 'getDevPassword',
'signature' => 'getSignature',
'payment_methods' => 'getPaymentMethods',
'merchant_id' => 'getMerchantId',
'url_sign_in' => 'getUrlSignIn',
'is_shipment_provider' => 'getIsShipmentProvider',
'app_password' => 'getAppPassword',
'description' => 'getDescription',
'date_created' => 'getDateCreated',
'url' => 'getUrl',
'service_url' => 'getServiceUrl',
'password' => 'getPassword',
'deleted' => 'getDeleted',
'secret' => 'getSecret',
'postal_code' => 'getPostalCode',
'paypal_email_address' => 'getPaypalEmailAddress',
'account_name' => 'getAccountName',
'app_id' => 'getAppId',
'dev_id' => 'getDevId',
'outline_agreement' => 'getOutlineAgreement',
'channel' => 'getChannel',
'url_finding' => 'getUrlFinding',
'app_key' => 'getAppKey',
'secret_key' => 'getSecretKey',
'marketplace_ids' => 'getMarketplaceIds',
'token' => 'getToken',
'active' => 'getActive',
'store_view' => 'getStoreView',
'emails' => 'getEmails',
'is_sandbox' => 'getIsSandbox',
'cert_id' => 'getCertId',
'is_sales_provider' => 'getIsSalesProvider',
'tracking_password' => 'getTrackingPassword',
'channel_language' => 'getChannelLanguage',
'api_password' => 'getApiPassword',
'partnership_key' => 'getPartnershipKey',
'ekp' => 'getEkp',
'id' => 'getId',
'api_username' => 'getApiUsername',
'url_shopping' => 'getUrlShopping',
'group_id' => 'getGroupId',
'key' => 'getKey',
'merchant_channel_id' => 'getMerchantChannelId',
'app_client_id' => 'getAppClientId',
'credential' => 'getCredential',
'username' => 'getUsername',
'mws_auth_token' => 'getMwsAuthToken',
'default_marketplace_id' => 'getDefaultMarketplaceId',
'title' => 'getTitle',
'marketplace_fallback_id' => 'getMarketplaceFallbackId',
'url_trading' => 'getUrlTrading'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_changed'] = isset($data['date_changed']) ? $data['date_changed'] : null;
        $this->container['partnership_password'] = isset($data['partnership_password']) ? $data['partnership_password'] : null;
        $this->container['shipment_marketplace_id'] = isset($data['shipment_marketplace_id']) ? $data['shipment_marketplace_id'] : null;
        $this->container['account_password'] = isset($data['account_password']) ? $data['account_password'] : null;
        $this->container['api_url'] = isset($data['api_url']) ? $data['api_url'] : null;
        $this->container['dev_key'] = isset($data['dev_key']) ? $data['dev_key'] : null;
        $this->container['attendance'] = isset($data['attendance']) ? $data['attendance'] : null;
        $this->container['access_key'] = isset($data['access_key']) ? $data['access_key'] : null;
        $this->container['tracking_id'] = isset($data['tracking_id']) ? $data['tracking_id'] : null;
        $this->container['channel_type'] = isset($data['channel_type']) ? $data['channel_type'] : null;
        $this->container['ekp_postfix'] = isset($data['ekp_postfix']) ? $data['ekp_postfix'] : null;
        $this->container['prefer_bware'] = isset($data['prefer_bware']) ? $data['prefer_bware'] : null;
        $this->container['is_payment_provider'] = isset($data['is_payment_provider']) ? $data['is_payment_provider'] : null;
        $this->container['ekp_postfix_rules'] = isset($data['ekp_postfix_rules']) ? $data['ekp_postfix_rules'] : null;
        $this->container['dev_password'] = isset($data['dev_password']) ? $data['dev_password'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['url_sign_in'] = isset($data['url_sign_in']) ? $data['url_sign_in'] : null;
        $this->container['is_shipment_provider'] = isset($data['is_shipment_provider']) ? $data['is_shipment_provider'] : null;
        $this->container['app_password'] = isset($data['app_password']) ? $data['app_password'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['service_url'] = isset($data['service_url']) ? $data['service_url'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['paypal_email_address'] = isset($data['paypal_email_address']) ? $data['paypal_email_address'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['dev_id'] = isset($data['dev_id']) ? $data['dev_id'] : null;
        $this->container['outline_agreement'] = isset($data['outline_agreement']) ? $data['outline_agreement'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['url_finding'] = isset($data['url_finding']) ? $data['url_finding'] : null;
        $this->container['app_key'] = isset($data['app_key']) ? $data['app_key'] : null;
        $this->container['secret_key'] = isset($data['secret_key']) ? $data['secret_key'] : null;
        $this->container['marketplace_ids'] = isset($data['marketplace_ids']) ? $data['marketplace_ids'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['store_view'] = isset($data['store_view']) ? $data['store_view'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['is_sandbox'] = isset($data['is_sandbox']) ? $data['is_sandbox'] : null;
        $this->container['cert_id'] = isset($data['cert_id']) ? $data['cert_id'] : null;
        $this->container['is_sales_provider'] = isset($data['is_sales_provider']) ? $data['is_sales_provider'] : null;
        $this->container['tracking_password'] = isset($data['tracking_password']) ? $data['tracking_password'] : null;
        $this->container['channel_language'] = isset($data['channel_language']) ? $data['channel_language'] : null;
        $this->container['api_password'] = isset($data['api_password']) ? $data['api_password'] : null;
        $this->container['partnership_key'] = isset($data['partnership_key']) ? $data['partnership_key'] : null;
        $this->container['ekp'] = isset($data['ekp']) ? $data['ekp'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['api_username'] = isset($data['api_username']) ? $data['api_username'] : null;
        $this->container['url_shopping'] = isset($data['url_shopping']) ? $data['url_shopping'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['merchant_channel_id'] = isset($data['merchant_channel_id']) ? $data['merchant_channel_id'] : null;
        $this->container['app_client_id'] = isset($data['app_client_id']) ? $data['app_client_id'] : null;
        $this->container['credential'] = isset($data['credential']) ? $data['credential'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['mws_auth_token'] = isset($data['mws_auth_token']) ? $data['mws_auth_token'] : null;
        $this->container['default_marketplace_id'] = isset($data['default_marketplace_id']) ? $data['default_marketplace_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['marketplace_fallback_id'] = isset($data['marketplace_fallback_id']) ? $data['marketplace_fallback_id'] : null;
        $this->container['url_trading'] = isset($data['url_trading']) ? $data['url_trading'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_changed
     *
     * @return string
     */
    public function getDateChanged()
    {
        return $this->container['date_changed'];
    }

    /**
     * Sets date_changed
     *
     * @param string $date_changed Timestamp of creation of the listing.
     *
     * @return $this
     */
    public function setDateChanged($date_changed)
    {
        $this->container['date_changed'] = $date_changed;

        return $this;
    }

    /**
     * Gets partnership_password
     *
     * @return string
     */
    public function getPartnershipPassword()
    {
        return $this->container['partnership_password'];
    }

    /**
     * Sets partnership_password
     *
     * @param string $partnership_password partnership_password
     *
     * @return $this
     */
    public function setPartnershipPassword($partnership_password)
    {
        $this->container['partnership_password'] = $partnership_password;

        return $this;
    }

    /**
     * Gets shipment_marketplace_id
     *
     * @return int
     */
    public function getShipmentMarketplaceId()
    {
        return $this->container['shipment_marketplace_id'];
    }

    /**
     * Sets shipment_marketplace_id
     *
     * @param int $shipment_marketplace_id shipment_marketplace_id
     *
     * @return $this
     */
    public function setShipmentMarketplaceId($shipment_marketplace_id)
    {
        $this->container['shipment_marketplace_id'] = $shipment_marketplace_id;

        return $this;
    }

    /**
     * Gets account_password
     *
     * @return string
     */
    public function getAccountPassword()
    {
        return $this->container['account_password'];
    }

    /**
     * Sets account_password
     *
     * @param string $account_password account_password
     *
     * @return $this
     */
    public function setAccountPassword($account_password)
    {
        $this->container['account_password'] = $account_password;

        return $this;
    }

    /**
     * Gets api_url
     *
     * @return string
     */
    public function getApiUrl()
    {
        return $this->container['api_url'];
    }

    /**
     * Sets api_url
     *
     * @param string $api_url api_url
     *
     * @return $this
     */
    public function setApiUrl($api_url)
    {
        $this->container['api_url'] = $api_url;

        return $this;
    }

    /**
     * Gets dev_key
     *
     * @return string
     */
    public function getDevKey()
    {
        return $this->container['dev_key'];
    }

    /**
     * Sets dev_key
     *
     * @param string $dev_key dev_key
     *
     * @return $this
     */
    public function setDevKey($dev_key)
    {
        $this->container['dev_key'] = $dev_key;

        return $this;
    }

    /**
     * Gets attendance
     *
     * @return string
     */
    public function getAttendance()
    {
        return $this->container['attendance'];
    }

    /**
     * Sets attendance
     *
     * @param string $attendance attendance
     *
     * @return $this
     */
    public function setAttendance($attendance)
    {
        $this->container['attendance'] = $attendance;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string $access_key access_key
     *
     * @return $this
     */
    public function setAccessKey($access_key)
    {
        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets tracking_id
     *
     * @return string
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param string $tracking_id tracking_id
     *
     * @return $this
     */
    public function setTrackingId($tracking_id)
    {
        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets channel_type
     *
     * @return string
     */
    public function getChannelType()
    {
        return $this->container['channel_type'];
    }

    /**
     * Sets channel_type
     *
     * @param string $channel_type channel_type
     *
     * @return $this
     */
    public function setChannelType($channel_type)
    {
        $this->container['channel_type'] = $channel_type;

        return $this;
    }

    /**
     * Gets ekp_postfix
     *
     * @return string
     */
    public function getEkpPostfix()
    {
        return $this->container['ekp_postfix'];
    }

    /**
     * Sets ekp_postfix
     *
     * @param string $ekp_postfix ekp_postfix
     *
     * @return $this
     */
    public function setEkpPostfix($ekp_postfix)
    {
        $this->container['ekp_postfix'] = $ekp_postfix;

        return $this;
    }

    /**
     * Gets prefer_bware
     *
     * @return bool
     */
    public function getPreferBware()
    {
        return $this->container['prefer_bware'];
    }

    /**
     * Sets prefer_bware
     *
     * @param bool $prefer_bware prefer_bware
     *
     * @return $this
     */
    public function setPreferBware($prefer_bware)
    {
        $this->container['prefer_bware'] = $prefer_bware;

        return $this;
    }

    /**
     * Gets is_payment_provider
     *
     * @return bool
     */
    public function getIsPaymentProvider()
    {
        return $this->container['is_payment_provider'];
    }

    /**
     * Sets is_payment_provider
     *
     * @param bool $is_payment_provider is_payment_provider
     *
     * @return $this
     */
    public function setIsPaymentProvider($is_payment_provider)
    {
        $this->container['is_payment_provider'] = $is_payment_provider;

        return $this;
    }

    /**
     * Gets ekp_postfix_rules
     *
     * @return string[]
     */
    public function getEkpPostfixRules()
    {
        return $this->container['ekp_postfix_rules'];
    }

    /**
     * Sets ekp_postfix_rules
     *
     * @param string[] $ekp_postfix_rules ekp_postfix_rules
     *
     * @return $this
     */
    public function setEkpPostfixRules($ekp_postfix_rules)
    {
        $this->container['ekp_postfix_rules'] = $ekp_postfix_rules;

        return $this;
    }

    /**
     * Gets dev_password
     *
     * @return string
     */
    public function getDevPassword()
    {
        return $this->container['dev_password'];
    }

    /**
     * Sets dev_password
     *
     * @param string $dev_password dev_password
     *
     * @return $this
     */
    public function setDevPassword($dev_password)
    {
        $this->container['dev_password'] = $dev_password;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string $signature signature
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[] $payment_methods payment_methods
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets url_sign_in
     *
     * @return string
     */
    public function getUrlSignIn()
    {
        return $this->container['url_sign_in'];
    }

    /**
     * Sets url_sign_in
     *
     * @param string $url_sign_in url_sign_in
     *
     * @return $this
     */
    public function setUrlSignIn($url_sign_in)
    {
        $this->container['url_sign_in'] = $url_sign_in;

        return $this;
    }

    /**
     * Gets is_shipment_provider
     *
     * @return bool
     */
    public function getIsShipmentProvider()
    {
        return $this->container['is_shipment_provider'];
    }

    /**
     * Sets is_shipment_provider
     *
     * @param bool $is_shipment_provider is_shipment_provider
     *
     * @return $this
     */
    public function setIsShipmentProvider($is_shipment_provider)
    {
        $this->container['is_shipment_provider'] = $is_shipment_provider;

        return $this;
    }

    /**
     * Gets app_password
     *
     * @return string
     */
    public function getAppPassword()
    {
        return $this->container['app_password'];
    }

    /**
     * Sets app_password
     *
     * @param string $app_password app_password
     *
     * @return $this
     */
    public function setAppPassword($app_password)
    {
        $this->container['app_password'] = $app_password;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created Timestamp of the latest update to the listing.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets service_url
     *
     * @return string
     */
    public function getServiceUrl()
    {
        return $this->container['service_url'];
    }

    /**
     * Sets service_url
     *
     * @param string $service_url service_url
     *
     * @return $this
     */
    public function setServiceUrl($service_url)
    {
        $this->container['service_url'] = $service_url;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string $secret secret
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets paypal_email_address
     *
     * @return string
     */
    public function getPaypalEmailAddress()
    {
        return $this->container['paypal_email_address'];
    }

    /**
     * Sets paypal_email_address
     *
     * @param string $paypal_email_address paypal_email_address
     *
     * @return $this
     */
    public function setPaypalEmailAddress($paypal_email_address)
    {
        $this->container['paypal_email_address'] = $paypal_email_address;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id app_id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets dev_id
     *
     * @return string
     */
    public function getDevId()
    {
        return $this->container['dev_id'];
    }

    /**
     * Sets dev_id
     *
     * @param string $dev_id dev_id
     *
     * @return $this
     */
    public function setDevId($dev_id)
    {
        $this->container['dev_id'] = $dev_id;

        return $this;
    }

    /**
     * Gets outline_agreement
     *
     * @return \Unifysell\SDK\Model\OutlineAgreement
     */
    public function getOutlineAgreement()
    {
        return $this->container['outline_agreement'];
    }

    /**
     * Sets outline_agreement
     *
     * @param \Unifysell\SDK\Model\OutlineAgreement $outline_agreement outline_agreement
     *
     * @return $this
     */
    public function setOutlineAgreement($outline_agreement)
    {
        $this->container['outline_agreement'] = $outline_agreement;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets url_finding
     *
     * @return string
     */
    public function getUrlFinding()
    {
        return $this->container['url_finding'];
    }

    /**
     * Sets url_finding
     *
     * @param string $url_finding url_finding
     *
     * @return $this
     */
    public function setUrlFinding($url_finding)
    {
        $this->container['url_finding'] = $url_finding;

        return $this;
    }

    /**
     * Gets app_key
     *
     * @return string
     */
    public function getAppKey()
    {
        return $this->container['app_key'];
    }

    /**
     * Sets app_key
     *
     * @param string $app_key app_key
     *
     * @return $this
     */
    public function setAppKey($app_key)
    {
        $this->container['app_key'] = $app_key;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string $secret_key secret_key
     *
     * @return $this
     */
    public function setSecretKey($secret_key)
    {
        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets marketplace_ids
     *
     * @return int[]
     */
    public function getMarketplaceIds()
    {
        return $this->container['marketplace_ids'];
    }

    /**
     * Sets marketplace_ids
     *
     * @param int[] $marketplace_ids marketplace_ids
     *
     * @return $this
     */
    public function setMarketplaceIds($marketplace_ids)
    {
        $this->container['marketplace_ids'] = $marketplace_ids;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets store_view
     *
     * @return string
     */
    public function getStoreView()
    {
        return $this->container['store_view'];
    }

    /**
     * Sets store_view
     *
     * @param string $store_view store_view
     *
     * @return $this
     */
    public function setStoreView($store_view)
    {
        $this->container['store_view'] = $store_view;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets is_sandbox
     *
     * @return bool
     */
    public function getIsSandbox()
    {
        return $this->container['is_sandbox'];
    }

    /**
     * Sets is_sandbox
     *
     * @param bool $is_sandbox is_sandbox
     *
     * @return $this
     */
    public function setIsSandbox($is_sandbox)
    {
        $this->container['is_sandbox'] = $is_sandbox;

        return $this;
    }

    /**
     * Gets cert_id
     *
     * @return string
     */
    public function getCertId()
    {
        return $this->container['cert_id'];
    }

    /**
     * Sets cert_id
     *
     * @param string $cert_id cert_id
     *
     * @return $this
     */
    public function setCertId($cert_id)
    {
        $this->container['cert_id'] = $cert_id;

        return $this;
    }

    /**
     * Gets is_sales_provider
     *
     * @return bool
     */
    public function getIsSalesProvider()
    {
        return $this->container['is_sales_provider'];
    }

    /**
     * Sets is_sales_provider
     *
     * @param bool $is_sales_provider is_sales_provider
     *
     * @return $this
     */
    public function setIsSalesProvider($is_sales_provider)
    {
        $this->container['is_sales_provider'] = $is_sales_provider;

        return $this;
    }

    /**
     * Gets tracking_password
     *
     * @return string
     */
    public function getTrackingPassword()
    {
        return $this->container['tracking_password'];
    }

    /**
     * Sets tracking_password
     *
     * @param string $tracking_password tracking_password
     *
     * @return $this
     */
    public function setTrackingPassword($tracking_password)
    {
        $this->container['tracking_password'] = $tracking_password;

        return $this;
    }

    /**
     * Gets channel_language
     *
     * @return string
     */
    public function getChannelLanguage()
    {
        return $this->container['channel_language'];
    }

    /**
     * Sets channel_language
     *
     * @param string $channel_language channel_language
     *
     * @return $this
     */
    public function setChannelLanguage($channel_language)
    {
        $this->container['channel_language'] = $channel_language;

        return $this;
    }

    /**
     * Gets api_password
     *
     * @return string
     */
    public function getApiPassword()
    {
        return $this->container['api_password'];
    }

    /**
     * Sets api_password
     *
     * @param string $api_password api_password
     *
     * @return $this
     */
    public function setApiPassword($api_password)
    {
        $this->container['api_password'] = $api_password;

        return $this;
    }

    /**
     * Gets partnership_key
     *
     * @return string
     */
    public function getPartnershipKey()
    {
        return $this->container['partnership_key'];
    }

    /**
     * Sets partnership_key
     *
     * @param string $partnership_key partnership_key
     *
     * @return $this
     */
    public function setPartnershipKey($partnership_key)
    {
        $this->container['partnership_key'] = $partnership_key;

        return $this;
    }

    /**
     * Gets ekp
     *
     * @return string
     */
    public function getEkp()
    {
        return $this->container['ekp'];
    }

    /**
     * Sets ekp
     *
     * @param string $ekp ekp
     *
     * @return $this
     */
    public function setEkp($ekp)
    {
        $this->container['ekp'] = $ekp;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets api_username
     *
     * @return string
     */
    public function getApiUsername()
    {
        return $this->container['api_username'];
    }

    /**
     * Sets api_username
     *
     * @param string $api_username api_username
     *
     * @return $this
     */
    public function setApiUsername($api_username)
    {
        $this->container['api_username'] = $api_username;

        return $this;
    }

    /**
     * Gets url_shopping
     *
     * @return string
     */
    public function getUrlShopping()
    {
        return $this->container['url_shopping'];
    }

    /**
     * Sets url_shopping
     *
     * @param string $url_shopping url_shopping
     *
     * @return $this
     */
    public function setUrlShopping($url_shopping)
    {
        $this->container['url_shopping'] = $url_shopping;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets merchant_channel_id
     *
     * @return string
     */
    public function getMerchantChannelId()
    {
        return $this->container['merchant_channel_id'];
    }

    /**
     * Sets merchant_channel_id
     *
     * @param string $merchant_channel_id merchant_channel_id
     *
     * @return $this
     */
    public function setMerchantChannelId($merchant_channel_id)
    {
        $this->container['merchant_channel_id'] = $merchant_channel_id;

        return $this;
    }

    /**
     * Gets app_client_id
     *
     * @return string
     */
    public function getAppClientId()
    {
        return $this->container['app_client_id'];
    }

    /**
     * Sets app_client_id
     *
     * @param string $app_client_id app_client_id
     *
     * @return $this
     */
    public function setAppClientId($app_client_id)
    {
        $this->container['app_client_id'] = $app_client_id;

        return $this;
    }

    /**
     * Gets credential
     *
     * @return string
     */
    public function getCredential()
    {
        return $this->container['credential'];
    }

    /**
     * Sets credential
     *
     * @param string $credential credential
     *
     * @return $this
     */
    public function setCredential($credential)
    {
        $this->container['credential'] = $credential;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets mws_auth_token
     *
     * @return string
     */
    public function getMwsAuthToken()
    {
        return $this->container['mws_auth_token'];
    }

    /**
     * Sets mws_auth_token
     *
     * @param string $mws_auth_token mws_auth_token
     *
     * @return $this
     */
    public function setMwsAuthToken($mws_auth_token)
    {
        $this->container['mws_auth_token'] = $mws_auth_token;

        return $this;
    }

    /**
     * Gets default_marketplace_id
     *
     * @return int
     */
    public function getDefaultMarketplaceId()
    {
        return $this->container['default_marketplace_id'];
    }

    /**
     * Sets default_marketplace_id
     *
     * @param int $default_marketplace_id default_marketplace_id
     *
     * @return $this
     */
    public function setDefaultMarketplaceId($default_marketplace_id)
    {
        $this->container['default_marketplace_id'] = $default_marketplace_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets marketplace_fallback_id
     *
     * @return int
     */
    public function getMarketplaceFallbackId()
    {
        return $this->container['marketplace_fallback_id'];
    }

    /**
     * Sets marketplace_fallback_id
     *
     * @param int $marketplace_fallback_id marketplace_fallback_id
     *
     * @return $this
     */
    public function setMarketplaceFallbackId($marketplace_fallback_id)
    {
        $this->container['marketplace_fallback_id'] = $marketplace_fallback_id;

        return $this;
    }

    /**
     * Gets url_trading
     *
     * @return string
     */
    public function getUrlTrading()
    {
        return $this->container['url_trading'];
    }

    /**
     * Sets url_trading
     *
     * @param string $url_trading url_trading
     *
     * @return $this
     */
    public function setUrlTrading($url_trading)
    {
        $this->container['url_trading'] = $url_trading;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
