<?php
/**
 * CreateListingRequestDeliveryOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UnifysellApi
 *
 * The unified endpoint to eCommerce APIs.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@unifysell.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Unifysell\SDK\Model;

use \ArrayAccess;
use \Unifysell\SDK\ObjectSerializer;

/**
 * CreateListingRequestDeliveryOptions Class Doc Comment
 *
 * @category Class
 * @package  Unifysell\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateListingRequestDeliveryOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateListingRequest_deliveryOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'package_service' => 'string',
        'package_size' => 'string',
        'package_weight' => 'string',
        'shipping_cost' => '\Unifysell\SDK\Model\Money',
        'shipping_is_cumulative' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'package_service' => null,
        'package_size' => null,
        'package_weight' => null,
        'shipping_cost' => null,
        'shipping_is_cumulative' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'package_service' => 'packageService',
        'package_size' => 'packageSize',
        'package_weight' => 'packageWeight',
        'shipping_cost' => 'shippingCost',
        'shipping_is_cumulative' => 'shippingIsCumulative'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'package_service' => 'setPackageService',
        'package_size' => 'setPackageSize',
        'package_weight' => 'setPackageWeight',
        'shipping_cost' => 'setShippingCost',
        'shipping_is_cumulative' => 'setShippingIsCumulative'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'package_service' => 'getPackageService',
        'package_size' => 'getPackageSize',
        'package_weight' => 'getPackageWeight',
        'shipping_cost' => 'getShippingCost',
        'shipping_is_cumulative' => 'getShippingIsCumulative'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGE_SERVICE_DHL = 'DHL';
    const PACKAGE_SIZE__60X30X15 = '60x30x15';
    const PACKAGE_SIZE__120X60X60 = '120x60x60';
    const PACKAGE_WEIGHT__2KG = '2kg';
    const PACKAGE_WEIGHT__5KG = '5kg';
    const PACKAGE_WEIGHT__10KG = '10kg';
    const PACKAGE_WEIGHT__315KG = '31,5kg';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageServiceAllowableValues()
    {
        return [
            self::PACKAGE_SERVICE_DHL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageSizeAllowableValues()
    {
        return [
            self::PACKAGE_SIZE__60X30X15,
            self::PACKAGE_SIZE__120X60X60,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageWeightAllowableValues()
    {
        return [
            self::PACKAGE_WEIGHT__2KG,
            self::PACKAGE_WEIGHT__5KG,
            self::PACKAGE_WEIGHT__10KG,
            self::PACKAGE_WEIGHT__315KG,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['package_service'] = isset($data['package_service']) ? $data['package_service'] : null;
        $this->container['package_size'] = isset($data['package_size']) ? $data['package_size'] : null;
        $this->container['package_weight'] = isset($data['package_weight']) ? $data['package_weight'] : null;
        $this->container['shipping_cost'] = isset($data['shipping_cost']) ? $data['shipping_cost'] : null;
        $this->container['shipping_is_cumulative'] = isset($data['shipping_is_cumulative']) ? $data['shipping_is_cumulative'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPackageServiceAllowableValues();
        if (!in_array($this->container['package_service'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_service', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackageSizeAllowableValues();
        if (!in_array($this->container['package_size'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_size', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackageWeightAllowableValues();
        if (!in_array($this->container['package_weight'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'package_weight', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipping_cost'] === null) {
            $invalidProperties[] = "'shipping_cost' can't be null";
        }
        if ($this->container['shipping_is_cumulative'] === null) {
            $invalidProperties[] = "'shipping_is_cumulative' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getPackageServiceAllowableValues();
        if (!in_array($this->container['package_service'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPackageSizeAllowableValues();
        if (!in_array($this->container['package_size'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPackageWeightAllowableValues();
        if (!in_array($this->container['package_weight'], $allowedValues)) {
            return false;
        }
        if ($this->container['shipping_cost'] === null) {
            return false;
        }
        if ($this->container['shipping_is_cumulative'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Describes this delivery option in words so it is well readable to a customer.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets package_service
     *
     * @return string
     */
    public function getPackageService()
    {
        return $this->container['package_service'];
    }

    /**
     * Sets package_service
     *
     * @param string $package_service The package service chosen for this delivery option.
     *
     * @return $this
     */
    public function setPackageService($package_service)
    {
        $allowedValues = $this->getPackageServiceAllowableValues();
        if (!is_null($package_service) && !in_array($package_service, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_service', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_service'] = $package_service;

        return $this;
    }

    /**
     * Gets package_size
     *
     * @return string
     */
    public function getPackageSize()
    {
        return $this->container['package_size'];
    }

    /**
     * Sets package_size
     *
     * @param string $package_size Enum defines available standard packge sizes. You can chose one of them the article fits into.
     *
     * @return $this
     */
    public function setPackageSize($package_size)
    {
        $allowedValues = $this->getPackageSizeAllowableValues();
        if (!is_null($package_size) && !in_array($package_size, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_size', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_size'] = $package_size;

        return $this;
    }

    /**
     * Gets package_weight
     *
     * @return string
     */
    public function getPackageWeight()
    {
        return $this->container['package_weight'];
    }

    /**
     * Sets package_weight
     *
     * @param string $package_weight Enum defines available standard packge weight classes. You can chose the one fitting you article best.
     *
     * @return $this
     */
    public function setPackageWeight($package_weight)
    {
        $allowedValues = $this->getPackageWeightAllowableValues();
        if (!is_null($package_weight) && !in_array($package_weight, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_weight', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_weight'] = $package_weight;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return \Unifysell\SDK\Model\Money
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param \Unifysell\SDK\Model\Money $shipping_cost shipping_cost
     *
     * @return $this
     */
    public function setShippingCost($shipping_cost)
    {
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets shipping_is_cumulative
     *
     * @return bool
     */
    public function getShippingIsCumulative()
    {
        return $this->container['shipping_is_cumulative'];
    }

    /**
     * Sets shipping_is_cumulative
     *
     * @param bool $shipping_is_cumulative This is only available for ricardo.
     *
     * @return $this
     */
    public function setShippingIsCumulative($shipping_is_cumulative)
    {
        $this->container['shipping_is_cumulative'] = $shipping_is_cumulative;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


